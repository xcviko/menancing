const express = require('express');
const sqlite3 = require('sqlite3').verbose();
const cors = require('cors');
const path = require('path');

const app = express();
const PORT = process.env.PORT || 3000;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
let isBlocked = false;
let blockedSince = null;
let retryTimeout = null;

// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
let retryMonitoringInterval = null;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π Set –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∫–ª–∞–¥–æ–∫ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è retry —Å–∏—Å—Ç–µ–º—ã)
let openedVacancyTabs = new Set();

// Middleware
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
const dbPath = path.join(__dirname, 'vacancy_links.db');
const db = new sqlite3.Database(dbPath);

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
db.serialize(() => {
    db.run(`CREATE TABLE IF NOT EXISTS vacancy_links (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        url TEXT UNIQUE NOT NULL,
        title TEXT,
        status TEXT DEFAULT 'new',
        page_number INTEGER,
        response_status TEXT DEFAULT 'pending',
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        responded_at DATETIME
    )`);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–æ–ª—è –µ—Å–ª–∏ —Ç–∞–±–ª–∏—Ü–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    db.run(`ALTER TABLE vacancy_links ADD COLUMN response_status TEXT DEFAULT 'pending'`, () => {});
    db.run(`ALTER TABLE vacancy_links ADD COLUMN responded_at DATETIME`, () => {});
    db.run(`ALTER TABLE vacancy_links ADD COLUMN is_being_tested INTEGER DEFAULT 0`, () => {});
});

// –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å UI
app.get('/', (req, res) => {
    res.send(`
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Menancing Parser Dashboard</title>
    <style>
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
            background: #f5f5f5;
        }
        .header {
            background: white;
            padding: 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .stats {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 15px;
            margin-bottom: 20px;
        }
        .stat-card {
            background: white;
            padding: 20px;
            border-radius: 8px;
            text-align: center;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        .stat-number {
            font-size: 2em;
            font-weight: bold;
            color: #4CAF50;
        }
        .stat-label {
            color: #666;
            margin-top: 5px;
        }
        .progress-bar {
            width: 100%;
            height: 20px;
            background: #e0e0e0;
            border-radius: 10px;
            overflow: hidden;
            margin: 10px 0;
        }
        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, #4CAF50, #45a049);
            transition: width 0.3s ease;
        }
        .controls {
            text-align: center;
            margin-bottom: 20px;
        }
        .btn {
            background: #4CAF50;
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 6px;
            cursor: pointer;
            font-size: 16px;
            margin: 0 10px;
            transition: background 0.3s;
        }
        .btn:hover {
            background: #45a049;
        }
        .btn-danger {
            background: #f44336;
        }
        .btn-danger:hover {
            background: #da190b;
        }
        .links-table {
            background: white;
            border-radius: 8px;
            overflow: hidden;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        }
        table {
            width: 100%;
            border-collapse: collapse;
        }
        th, td {
            padding: 12px;
            text-align: left;
            border-bottom: 1px solid #ddd;
        }
        th {
            background: #f8f9fa;
            font-weight: 600;
        }
        .link-title {
            max-width: 300px;
            overflow: hidden;
            text-overflow: ellipsis;
            white-space: nowrap;
            color: #2196F3;
            text-decoration: none;
        }
        .link-title:hover {
            color: #1976D2;
            text-decoration: underline;
        }
        .loading {
            text-align: center;
            padding: 20px;
            color: #666;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üöÄ Menancing Parser Dashboard</h1>
        <p>–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø–∞—Ä—Å–∏–Ω–≥–∞ –≤–∞–∫–∞–Ω—Å–∏–π —Å hh.ru</p>
    </div>

    <div id="blockingBanner" style="display: none; background: #E91E63; color: white; padding: 15px; margin-bottom: 20px; border-radius: 8px; text-align: center; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">
        <h3 style="margin: 0; font-size: 18px;">üö´ –°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ (403)</h3>
        <p style="margin: 5px 0 0 0; opacity: 0.9;">–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–∫–ª–∏–∫–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã. –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É.</p>
        <div style="margin-top: 10px;">
            <button class="btn" onclick="forceRetry()" style="background: #FF9800; color: white; margin-right: 10px;">‚ö° –°–∫–∏–ø–Ω—É—Ç—å –º–∏–Ω—É—Ç—É</button>
            <button class="btn" onclick="clearBlocking()" style="background: white; color: #E91E63;">‚úÖ –°–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤—Ä—É—á–Ω—É—é</button>
        </div>
    </div>

    <div class="stats">
        <div class="stat-card">
            <div class="stat-number" id="totalLinks">-</div>
            <div class="stat-label">–í—Å–µ–≥–æ —Å—Å—ã–ª–æ–∫</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="targetLinks">300</div>
            <div class="stat-label">–¶–µ–ª—å –ø–∞—Ä—Å–∏–Ω–≥–∞</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="remainingLinks">-</div>
            <div class="stat-label">–û—Å—Ç–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="progressPercent">-</div>
            <div class="stat-label">–ü—Ä–æ–≥—Ä–µ—Å—Å –ø–∞—Ä—Å–∏–Ω–≥–∞</div>
        </div>
    </div>

    <div class="stats">
        <div class="stat-card">
            <div class="stat-number" id="pendingResponses" style="color: #FF9800;">-</div>
            <div class="stat-label">–û–∂–∏–¥–∞—é—Ç –æ—Ç–∫–ª–∏–∫–∞</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="processingResponses" style="color: #2196F3;">-</div>
            <div class="stat-label">–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="completedResponses" style="color: #4CAF50;">-</div>
            <div class="stat-label">–û—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="failedResponses" style="color: #f44336;">-</div>
            <div class="stat-label">–û—à–∏–±–∫–∏</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="quizResponses" style="color: #FF5722;">-</div>
            <div class="stat-label">–¢—Ä–µ–±—É–µ—Ç –∫–≤–∏–∑</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="coverLetterResponses" style="color: #9C27B0;">-</div>
            <div class="stat-label">–¢—Ä–µ–±—É–µ—Ç –ø–∏—Å—å–º–æ</div>
        </div>
        <div class="stat-card">
            <div class="stat-number" id="blockedResponses" style="color: #E91E63;">-</div>
            <div class="stat-label">–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ</div>
        </div>
    </div>

    <div class="progress-bar">
        <div class="progress-fill" id="responseProgressBar" style="width: 0%; background: linear-gradient(90deg, #FF9800, #4CAF50);"></div>
    </div>

    <div class="progress-bar">
        <div class="progress-fill" id="progressBar" style="width: 0%"></div>
    </div>

    <div class="controls">
        <button class="btn" onclick="refreshData()">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</button>
        <button class="btn btn-danger" onclick="clearDatabase()">üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –±–∞–∑—É</button>
        <button class="btn" onclick="startAutoResponding()" id="startRespondingBtn" style="background: #4CAF50;">üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏</button>
        <button class="btn btn-danger" onclick="stopAutoResponding()" id="stopRespondingBtn" style="display: none;">‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ—Ç–∫–ª–∏–∫–∏</button>
    </div>

    <div class="links-table">
        <table>
            <thead>
                <tr>
                    <th>#</th>
                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏</th>
                    <th>–°—Ç—Ä–∞–Ω–∏—Ü–∞</th>
                    <th>–°—Ç–∞—Ç—É—Å –æ—Ç–∫–ª–∏–∫–∞</th>
                    <th>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è</th>
                </tr>
            </thead>
            <tbody id="linksTableBody">
                <tr>
                    <td colspan="5" class="loading">–ó–∞–≥—Ä—É–∑–∫–∞...</td>
                </tr>
            </tbody>
        </table>
    </div>

    <script>
        async function fetchStats() {
            try {
                const response = await fetch('/api/stats');
                const stats = await response.json();
                
                document.getElementById('totalLinks').textContent = stats.total;
                document.getElementById('remainingLinks').textContent = stats.remaining;
                document.getElementById('progressPercent').textContent = stats.progress + '%';
                document.getElementById('progressBar').style.width = stats.progress + '%';
                
                return stats;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            }
        }

        async function fetchResponseStats() {
            try {
                const response = await fetch('/api/response-stats');
                const stats = await response.json();
                
                document.getElementById('pendingResponses').textContent = stats.pending;
                document.getElementById('processingResponses').textContent = stats.processing;
                document.getElementById('completedResponses').textContent = stats.completed;
                document.getElementById('failedResponses').textContent = stats.failed;
                document.getElementById('quizResponses').textContent = stats.requires_quiz;
                document.getElementById('coverLetterResponses').textContent = stats.requires_cover_letter;
                document.getElementById('blockedResponses').textContent = stats.blocked_403;
                document.getElementById('responseProgressBar').style.width = stats.progress + '%';
                
                // –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
                const startBtn = document.getElementById('startRespondingBtn');
                if (stats.canStartResponding && !isRespondingActive) {
                    startBtn.style.display = 'inline-block';
                    startBtn.textContent = 'üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏ (' + stats.pending + ')';
                } else if (!isRespondingActive) {
                    startBtn.style.display = 'none';
                }
                
                return stats;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ç–∫–ª–∏–∫–æ–≤:', error);
            }
        }

        async function fetchLinks() {
            try {
                const response = await fetch('/api/links');
                const data = await response.json();
                
                const tbody = document.getElementById('linksTableBody');
                
                if (data.links.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="5" class="loading">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö</td></tr>';
                    return;
                }
                
                tbody.innerHTML = data.links.map((link, index) => {
                    const statusColors = {
                        'pending': '#FF9800',
                        'processing': '#2196F3', 
                        'completed': '#4CAF50',
                        'failed': '#f44336',
                        'requires_quiz': '#FF5722',
                        'requires_cover_letter': '#9C27B0',
                        'blocked_403': '#E91E63'
                    };
                    const statusTexts = {
                        'pending': '–û–∂–∏–¥–∞–µ—Ç',
                        'processing': '–í —Ä–∞–±–æ—Ç–µ',
                        'completed': '–û—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å',
                        'failed': '–û—à–∏–±–∫–∞',
                        'requires_quiz': '–¢—Ä–µ–±—É–µ—Ç –∫–≤–∏–∑',
                        'requires_cover_letter': '–¢—Ä–µ–±—É–µ—Ç –ø–∏—Å—å–º–æ',
                        'blocked_403': '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
                    };
                    return '<tr>' +
                        '<td>' + (index + 1) + '</td>' +
                        '<td><a href="' + link.url + '" target="_blank" class="link-title" title="' + (link.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') + '">' + (link.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è') + '</a></td>' +
                        '<td>' + (link.page_number !== null ? '–°—Ç—Ä. ' + (link.page_number + 1) : '-') + '</td>' +
                        '<td style="color: ' + (statusColors[link.response_status] || '#666') + '">' + (statusTexts[link.response_status] || link.response_status) + '</td>' +
                        '<td>' + new Date(link.created_at).toLocaleString('ru-RU') + '</td>' +
                    '</tr>';
                }).join('');
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Å—ã–ª–æ–∫:', error);
            }
        }

        async function clearDatabase() {
            if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?')) {
                return;
            }
            
            try {
                const response = await fetch('/api/links', { method: 'DELETE' });
                const result = await response.json();
                
                if (result.success) {
                    alert('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞!');
                    refreshData();
                } else {
                    alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã:', error);
                alert('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö');
            }
        }

        let respondingInterval = null;
        let isRespondingActive = false;
        let localOpenedVacancyTabs = new Set(); // –õ–æ–∫–∞–ª—å–Ω–∞—è –∫–æ–ø–∏—è –¥–ª—è dashboard

        async function startAutoResponding() {
            if (isRespondingActive) {
                alert('–ê–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω—ã!');
                return;
            }

            const stats = await fetchResponseStats();
            if (!stats.canStartResponding) {
                alert('–ù–µ—Ç –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ—Ç–∫–ª–∏–∫–æ–≤ –∏–ª–∏ –≤—Å–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
                return;
            }

            if (!confirm('–ù–∞—á–∞—Ç—å –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏? –ë—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–æ ' + stats.pending + ' –≤–∫–ª–∞–¥–æ–∫ –ø–æ –æ–¥–Ω–æ–π –∫–∞–∂–¥—ã–µ 4 —Å–µ–∫—É–Ω–¥—ã.')) {
                return;
            }

            isRespondingActive = true;
            document.getElementById('startRespondingBtn').style.display = 'none';
            document.getElementById('stopRespondingBtn').style.display = 'inline-block';

            console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤ —á–µ—Ä–µ–∑ –¥–∞—à–±–æ—Ä–¥');
            
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é —Å—Ä–∞–∑—É
            await openNextVacancy();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–æ–ª—å–∫–æ –¥–ª—è UI
            startVacancyMonitoring();
            
            // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –ø–æ—è–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö processing –≤–∞–∫–∞–Ω—Å–∏–π
            startProcessingMonitor();
        }

        async function openNextVacancy() {
            try {
                const response = await fetch('/api/next-vacancy');
                const data = await response.json();
                
                if (!data.vacancy) {
                    console.log('üéâ –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
                    return false;
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è
                if (localOpenedVacancyTabs.has(data.vacancy.id)) {
                    console.log('‚è≥ –í–∞–∫–∞–Ω—Å–∏—è —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...');
                    return true;
                }

                console.log('üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é: ' + data.vacancy.title);
                
                // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö
                localOpenedVacancyTabs.add(data.vacancy.id);
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è retry —Å–∏—Å—Ç–µ–º—ã  
                try {
                    await fetch('/api/sync-opened-tabs', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ action: 'add', vacancyId: data.vacancy.id })
                    });
                } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */ }
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
                window.open(data.vacancy.url, '_blank');
                
                return true;
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
                return false;
            }
        }

        function startVacancyMonitoring() {
            // –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ - —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
            respondingInterval = setInterval(async () => {
                if (!isRespondingActive) {
                    clearInterval(respondingInterval);
                    return;
                }
                
                const stats = await fetchResponseStats();
                
                // –ï—Å–ª–∏ –±–æ–ª—å—à–µ –Ω–µ—Ç pending –≤–∞–∫–∞–Ω—Å–∏–π, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
                if (stats.pending === 0) {
                    console.log('üéâ –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
                    stopAutoResponding();
                }
            }, 3000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        }

        function startProcessingMonitor() {
            // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è —Å–ª–µ–¥—É—é—â–∏—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            const processingInterval = setInterval(async () => {
                if (!isRespondingActive) {
                    clearInterval(processingInterval);
                    return;
                }
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –Ω–æ–≤—ã–µ processing –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è
                const response = await fetch('/api/links');
                const data = await response.json();
                
                const processingVacancies = data.links.filter(link => 
                    link.response_status === 'processing' && 
                    !localOpenedVacancyTabs.has(link.id)
                );
                
                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ processing –≤–∞–∫–∞–Ω—Å–∏–∏
                processingVacancies.forEach(vacancy => {
                    if (!localOpenedVacancyTabs.has(vacancy.id)) {
                        console.log('üîó –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ –Ω–æ–≤–æ–π processing –≤–∞–∫–∞–Ω—Å–∏–∏:', vacancy.title);
                        localOpenedVacancyTabs.add(vacancy.id);
                        
                        // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è retry —Å–∏—Å—Ç–µ–º—ã  
                        try {
                            fetch('/api/sync-opened-tabs', {
                                method: 'POST',
                                headers: { 'Content-Type': 'application/json' },
                                body: JSON.stringify({ action: 'add', vacancyId: vacancy.id })
                            });
                        } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */ }
                        window.open(vacancy.url, '_blank');
                    }
                });
                
            }, 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
        }

        function stopAutoResponding() {
            if (respondingInterval) {
                clearInterval(respondingInterval);
                respondingInterval = null;
            }
            
            isRespondingActive = false;
            localOpenedVacancyTabs.clear(); // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∫–ª–∞–¥–æ–∫
            
            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –æ—á–∏—Å—Ç–∫—É —Å —Å–µ—Ä–≤–µ—Ä–æ–º
            try {
                fetch('/api/sync-opened-tabs', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ action: 'clear' })
                });
            } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */ }
            document.getElementById('startRespondingBtn').style.display = 'inline-block';
            document.getElementById('stopRespondingBtn').style.display = 'none';
            
            console.log('‚èπÔ∏è –ê–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã');
        }

        async function fetchBlockingStatus() {
            try {
                const response = await fetch('/api/is-blocked');
                const data = await response.json();
                
                const banner = document.getElementById('blockingBanner');
                if (data.isBlocked) {
                    banner.style.display = 'block';
                } else {
                    banner.style.display = 'none';
                }
                
                return data;
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
            }
        }

        async function forceRetry() {
            if (!confirm('–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–µ–π—á–∞—Å? –°–∏—Å—Ç–µ–º–∞ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é.')) {
                return;
            }
            
            try {
                const response = await fetch('/api/force-retry', { method: 'POST' });
                const result = await response.json();
                
                if (result.success) {
                    alert('Retry –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞! –°–∏—Å—Ç–µ–º–∞ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–∫—Ä—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é.');
                    refreshData();
                    
                    // –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–æ–≤—ã—Ö processing –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è retry-—Ç–µ—Å—Ç–æ–≤
                    setTimeout(async () => {
                        console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö processing –≤–∞–∫–∞–Ω—Å–∏–π –ø–æ—Å–ª–µ force-retry...');
                        const response = await fetch('/api/links');
                        const data = await response.json();
                        
                        console.log('üìä –í—Å–µ–≥–æ –≤–∞–∫–∞–Ω—Å–∏–π –≤ –±–∞–∑–µ:', data.links.length);
                        
                        // –ò—â–µ–º –≤—Å–µ processing –≤–∞–∫–∞–Ω—Å–∏–∏
                        const allProcessingVacancies = data.links.filter(link => 
                            link.response_status === 'processing'
                        );
                        console.log('üìä –í—Å–µ–≥–æ processing –≤–∞–∫–∞–Ω—Å–∏–π:', allProcessingVacancies.length);
                        
                        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–∂–¥—É—é processing –≤–∞–∫–∞–Ω—Å–∏—é
                        allProcessingVacancies.forEach((vacancy, index) => {
                            console.log('üìã Processing –≤–∞–∫–∞–Ω—Å–∏—è ' + (index + 1) + ':');
                            console.log('   ID:', vacancy.id);
                            console.log('   Title:', vacancy.title);
                            console.log('   Status:', vacancy.response_status);
                            console.log('   –í localOpenedVacancyTabs:', localOpenedVacancyTabs.has(vacancy.id));
                        });
                        
                        const newProcessingVacancies = allProcessingVacancies;
                        
                        console.log('üìä –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö processing –≤–∞–∫–∞–Ω—Å–∏–π:', newProcessingVacancies.length);
                        
                        newProcessingVacancies.forEach(vacancy => {
                            console.log('üîó –ê–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏–µ retry-—Ç–µ—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏:', vacancy.title);
                            console.log('üÜî ID –≤–∞–∫–∞–Ω—Å–∏–∏:', vacancy.id);
                            console.log('üîó URL:', vacancy.url);
                            
                            // –£–¥–∞–ª—è–µ–º –∏–∑ localOpenedVacancyTabs –µ—Å–ª–∏ –±—ã–ª–∞ —Ç–∞–º —Ä–∞–Ω–µ–µ, –∑–∞—Ç–µ–º –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω–æ–≤–æ
                            localOpenedVacancyTabs.delete(vacancy.id);
                            localOpenedVacancyTabs.add(vacancy.id);
                            
                            // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å —Å–µ—Ä–≤–µ—Ä–æ–º –¥–ª—è retry —Å–∏—Å—Ç–µ–º—ã  
                            try {
                                fetch('/api/sync-opened-tabs', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ action: 'delete', vacancyId: vacancy.id })
                                });
                                fetch('/api/sync-opened-tabs', {
                                    method: 'POST',
                                    headers: { 'Content-Type': 'application/json' },
                                    body: JSON.stringify({ action: 'add', vacancyId: vacancy.id })
                                });
                            } catch (e) { /* –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ */ }
                            
                            window.open(vacancy.url, '_blank');
                        });
                    }, 2000); // –î–∞–µ–º –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä—É –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å
                } else {
                    alert('–û—à–∏–±–∫–∞: ' + result.message);
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ retry:', error);
                alert('–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ retry');
            }
        }

        async function clearBlocking() {
            if (!confirm('–°–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∏—Å—Ç–µ–º—ã? –ê–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–∏ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—Å—è.')) {
                return;
            }
            
            try {
                const response = await fetch('/api/clear-blocked', { method: 'POST' });
                const result = await response.json();
                
                if (result.success) {
                    alert('–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞!');
                    refreshData();
                } else {
                    alert('–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
                }
            } catch (error) {
                console.error('–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
                alert('–û—à–∏–±–∫–∞ —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
            }
        }

        async function refreshData() {
            await Promise.all([fetchStats(), fetchResponseStats(), fetchLinks(), fetchBlockingStatus()]);
        }

        // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        setInterval(refreshData, 5000);
        
        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        refreshData();
    </script>
</body>
</html>
    `);
});

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫
app.post('/api/links', (req, res) => {
    const { links, pageNumber } = req.body;
    
    if (!Array.isArray(links) || links.length === 0) {
        return res.status(400).json({ error: '–ú–∞—Å—Å–∏–≤ —Å—Å—ã–ª–æ–∫ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' });
    }

    let inserted = 0;
    let duplicates = 0;
    
    const stmt = db.prepare(`INSERT OR IGNORE INTO vacancy_links (url, title, page_number) VALUES (?, ?, ?)`);
    
    links.forEach(link => {
        const result = stmt.run(link.url, link.title || null, pageNumber || null);
        if (result.changes > 0) {
            inserted++;
        } else {
            duplicates++;
        }
    });
    
    stmt.finalize();
    
    res.json({
        success: true,
        inserted,
        duplicates,
        total: links.length,
        message: `–î–æ–±–∞–≤–ª–µ–Ω–æ ${inserted} –Ω–æ–≤—ã—Ö —Å—Å—ã–ª–æ–∫, –ø—Ä–æ–ø—É—â–µ–Ω–æ ${duplicates} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤`
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å—Å—ã–ª–æ–∫
app.get('/api/links', (req, res) => {
    db.all(`SELECT * FROM vacancy_links ORDER BY created_at DESC`, (err, rows) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.json({ links: rows });
    });
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get('/api/stats', (req, res) => {
    db.get(`SELECT COUNT(*) as total FROM vacancy_links`, (err, row) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        
        const total = row.total;
        const progress = Math.min((total / 300) * 100, 100);
        const remaining = Math.max(300 - total, 0);
        
        res.json({
            total,
            target: 300,
            remaining,
            progress: Math.round(progress),
            completed: total >= 300
        });
    });
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫–ª–∏–∫–æ–≤
app.get('/api/next-vacancy', (req, res) => {
    // –°–Ω–∞—á–∞–ª–∞ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∑–∞–≤–∏—Å—à–∏–µ processing —Å—Ç–∞—Ç—É—Å—ã (–µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –∫—Ä–∞—à–Ω—É–ª—Å—è)
    db.run(`UPDATE vacancy_links SET response_status = 'pending' WHERE response_status = 'processing'`, (err) => {
        if (err) console.log('–û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ processing —Å—Ç–∞—Ç—É—Å–æ–≤:', err);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é pending –≤–∞–∫–∞–Ω—Å–∏—é
        db.get(`SELECT * FROM vacancy_links WHERE response_status = 'pending' ORDER BY id LIMIT 1`, (err, row) => {
            if (err) {
                return res.status(500).json({ error: err.message });
            }
            
            if (!row) {
                return res.json({ vacancy: null, message: '–í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã' });
            }
            
            // –°—Ä–∞–∑—É –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ "processing" —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
            db.run(`UPDATE vacancy_links SET response_status = 'processing' WHERE id = ?`, [row.id], (updateErr) => {
                if (updateErr) {
                    console.log('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', updateErr);
                }
                
                res.json({ vacancy: row });
            });
        });
    });
});

// –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
app.post('/api/vacancy/start', (req, res) => {
    const { vacancyId } = req.body;
    
    if (!vacancyId) {
        return res.status(400).json({ error: 'vacancyId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    
    db.run(`UPDATE vacancy_links SET response_status = 'processing' WHERE id = ?`, [vacancyId], (err) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.json({ success: true, message: '–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º–∞—è' });
    });
});

// –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ "–æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å"
app.post('/api/vacancy/complete', (req, res) => {
    const { vacancyId } = req.body;
    
    if (!vacancyId) {
        return res.status(400).json({ error: 'vacancyId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    
    db.run(`UPDATE vacancy_links SET response_status = 'completed', responded_at = CURRENT_TIMESTAMP WHERE id = ?`, [vacancyId], (err) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.json({ success: true, message: '–û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ' });
    });
});

// –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ "–æ—à–∏–±–∫–∞"
app.post('/api/vacancy/failed', (req, res) => {
    const { vacancyId, reason } = req.body;
    
    if (!vacancyId) {
        return res.status(400).json({ error: 'vacancyId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    
    db.run(`UPDATE vacancy_links SET response_status = 'failed' WHERE id = ?`, [vacancyId], (err) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.json({ success: true, message: '–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è', reason: reason || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞' });
    });
});

// –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ "—Ç—Ä–µ–±—É–µ—Ç —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ"
app.post('/api/vacancy/requires-cover-letter', (req, res) => {
    const { vacancyId } = req.body;
    
    if (!vacancyId) {
        return res.status(400).json({ error: 'vacancyId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    
    db.run(`UPDATE vacancy_links SET response_status = 'requires_cover_letter' WHERE id = ?`, [vacancyId], (err) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        
        console.log(`üìù –í–∞–∫–∞–Ω—Å–∏—è ID${vacancyId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∞—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é pending –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        db.get(`SELECT * FROM vacancy_links WHERE response_status = 'pending' ORDER BY id LIMIT 1`, (err, nextVacancy) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', err);
                return res.json({ success: true, message: '–í–∞–∫–∞–Ω—Å–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∞—è —Å–æ–ø—Ä. –ø–∏—Å—å–º–æ' });
            }
            
            if (!nextVacancy) {
                console.log('üéâ –ë–æ–ª—å—à–µ –Ω–µ—Ç pending –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!');
                return res.json({ success: true, message: '–í–∞–∫–∞–Ω—Å–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∞—è —Å–æ–ø—Ä. –ø–∏—Å—å–º–æ, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã', allCompleted: true });
            }
            
            // –ü–æ–º–µ—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞–∫ processing –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
            db.run(`UPDATE vacancy_links SET response_status = 'processing' WHERE id = ?`, [nextVacancy.id], (updateErr) => {
                if (updateErr) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', updateErr);
                }
                
                console.log(`üîó –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏—è: ${nextVacancy.title}`);
                
                res.json({ 
                    success: true, 
                    message: '–í–∞–∫–∞–Ω—Å–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∞—è —Å–æ–ø—Ä. –ø–∏—Å—å–º–æ, —Å–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ dashboard\'–æ–º',
                    shouldOpenNext: true
                });
            });
        });
    });
});

// –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ "—Ç—Ä–µ–±—É–µ—Ç –∫–≤–∏–∑"
app.post('/api/vacancy/requires-quiz', (req, res) => {
    const { vacancyId } = req.body;
    
    if (!vacancyId) {
        return res.status(400).json({ error: 'vacancyId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    
    db.run(`UPDATE vacancy_links SET response_status = 'requires_quiz' WHERE id = ?`, [vacancyId], (err) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        
        console.log(`üìù –í–∞–∫–∞–Ω—Å–∏—è ID${vacancyId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∞—è –∫–≤–∏–∑`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é pending –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        db.get(`SELECT * FROM vacancy_links WHERE response_status = 'pending' ORDER BY id LIMIT 1`, (err, nextVacancy) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', err);
                return res.json({ success: true, message: '–í–∞–∫–∞–Ω—Å–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∞—è –∫–≤–∏–∑' });
            }
            
            if (!nextVacancy) {
                console.log('üéâ –ë–æ–ª—å—à–µ –Ω–µ—Ç pending –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏!');
                return res.json({ success: true, message: '–í–∞–∫–∞–Ω—Å–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∞—è –∫–≤–∏–∑, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã', allCompleted: true });
            }
            
            // –ü–æ–º–µ—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞–∫ processing –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç–∫—Ä—ã—Ç–∏—è
            db.run(`UPDATE vacancy_links SET response_status = 'processing' WHERE id = ?`, [nextVacancy.id], (updateErr) => {
                if (updateErr) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', updateErr);
                }
                
                console.log(`üîó –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –∞–≤—Ç–æ–æ—Ç–∫—Ä—ã—Ç–∏—è: ${nextVacancy.title}`);
                
                res.json({ 
                    success: true, 
                    message: '–í–∞–∫–∞–Ω—Å–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∞—è –∫–≤–∏–∑, —Å–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ dashboard\'–æ–º',
                    shouldOpenNext: true
                });
            });
        });
    });
});

// –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π endpoint: –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ completed + –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é
app.post('/api/vacancy/completed-and-next', (req, res) => {
    const { vacancyId } = req.body;
    
    if (!vacancyId) {
        return res.status(400).json({ error: 'vacancyId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    
    // –ü–æ–º–µ—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∫–∞–∫ completed
    db.run(`UPDATE vacancy_links SET response_status = 'completed', responded_at = CURRENT_TIMESTAMP WHERE id = ?`, [vacancyId], (err) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        
        console.log(`‚úÖ –í–∞–∫–∞–Ω—Å–∏—è ID${vacancyId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ completed`);
        
        // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –≤–∞–∫–∞–Ω—Å–∏—é - —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        if (isBlocked) {
            console.log('üéâ –†–ê–ó–ë–õ–û–ö–ò–†–û–í–ö–ê: –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–∫–ª–∏–∫ –≤–æ –≤—Ä–µ–º—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏!');
            console.log('üìä –°–Ω–∏–º–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∏—Å—Ç–µ–º—ã');
            isBlocked = false;
            blockedSince = null;
            if (retryTimeout) {
                console.log('‚è∞ –û—Ç–º–µ–Ω—è–µ–º retry timeout');
                clearTimeout(retryTimeout);
                retryTimeout = null;
            }
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
        } else {
            console.log('üìä –°–∏—Å—Ç–µ–º–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞–±–æ—Ç—É');
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é pending –≤–∞–∫–∞–Ω—Å–∏—é
        db.get(`SELECT * FROM vacancy_links WHERE response_status = 'pending' ORDER BY id LIMIT 1`, (err, nextVacancy) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', err);
                return res.json({ success: true, message: '–¢–µ–∫—É—â–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ª–µ–¥—É—é—â–µ–π' });
            }
            
            if (!nextVacancy) {
                console.log('üéâ –í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!');
                return res.json({ success: true, message: '–í—Å–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!', allCompleted: true });
            }
            
            // –ü–æ–º–µ—á–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –∫–∞–∫ processing
            db.run(`UPDATE vacancy_links SET response_status = 'processing' WHERE id = ?`, [nextVacancy.id], (updateErr) => {
                if (updateErr) {
                    console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', updateErr);
                }
                
                console.log(`üîó –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –≤–∞–∫–∞–Ω—Å–∏—é: ${nextVacancy.title}`);
                
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º Server-Sent Events –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ —á–µ—Ä–µ–∑ polling endpoint
                
                res.json({ 
                    success: true, 
                    message: '–í–∞–∫–∞–Ω—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Å–ª–µ–¥—É—é—â–∞—è –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç–∞ dashboard\'–æ–º',
                    shouldOpenNext: true
                });
            });
        });
    });
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–∫–ª–∏–∫–æ–≤
app.get('/api/response-stats', (req, res) => {
    db.all(`
        SELECT 
            response_status,
            COUNT(*) as count
        FROM vacancy_links 
        GROUP BY response_status
    `, (err, rows) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        
        const stats = {
            pending: 0,
            processing: 0,
            completed: 0,
            failed: 0,
            requires_quiz: 0,
            requires_cover_letter: 0,
            blocked_403: 0
        };
        
        rows.forEach(row => {
            stats[row.response_status] = row.count;
        });
        
        const total = stats.pending + stats.processing + stats.completed + stats.failed;
        const progress = total > 0 ? Math.round((stats.completed / total) * 100) : 0;
        
        res.json({
            ...stats,
            total,
            progress,
            canStartResponding: stats.pending > 0
        });
    });
});

// –û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã
app.delete('/api/links', (req, res) => {
    db.run(`DELETE FROM vacancy_links`, (err) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        res.json({ success: true, message: '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞' });
    });
});

// ============ –°–ò–°–¢–ï–ú–ê RETRY –î–õ–Ø –ë–õ–û–ö–ò–†–û–í–ö–ò ============

function startRetrySystem() {
    console.log('üîÑ === –ó–ê–ü–£–°–ö RETRY –°–ò–°–¢–ï–ú–´ ===');
    console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:');
    console.log('   - isBlocked:', isBlocked);
    console.log('   - blockedSince:', blockedSince);
    console.log('   - retryTimeout —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!retryTimeout);
    
    if (retryTimeout) {
        console.log('‚è∞ –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π timeout');
        clearTimeout(retryTimeout);
        retryTimeout = null;
    }
    
    console.log('‚è∞ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π timeout –Ω–∞ 60 —Å–µ–∫—É–Ω–¥...');
    console.log('üìÖ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤:', new Date(Date.now() + 60000).toLocaleTimeString());
    retryTimeout = setTimeout(async () => {
        console.log('üîî TIMEOUT –°–†–ê–ë–û–¢–ê–õ - –Ω–∞—á–∏–Ω–∞–µ–º retry –ø—Ä–æ–≤–µ—Ä–∫—É');
        console.log('üìÖ –í—Ä–µ–º—è —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è:', new Date().toLocaleTimeString());
        
        if (!isBlocked) {
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –±–æ–ª—å—à–µ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –≤—ã—Ö–æ–¥–∏–º –∏–∑ retry');
            return; // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ —Å–Ω—è—Ç–∞
        }
        
        console.log('üîÑ –°–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –∏—â–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏...');
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        console.log('üìä –ò—â–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑–µ...');
        db.get(`SELECT * FROM vacancy_links WHERE response_status = 'blocked_403' ORDER BY id LIMIT 1`, (err, blockedVacancy) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', err);
                console.log('üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º retry —Å–∏—Å—Ç–µ–º—É –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏');
                startRetrySystem(); // –ü–æ–≤—Ç–æ—Ä—è–µ–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
                return;
            }
            
            if (!blockedVacancy) {
                console.log('‚ö†Ô∏è –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                console.log('üîÑ –ù–æ —Å–∏—Å—Ç–µ–º–∞ –≤—Å–µ –µ—â–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - —Ç–µ—Å—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—É—é pending –≤–∞–∫–∞–Ω—Å–∏—é');
                
                // –ï—Å–ª–∏ –Ω–µ—Ç blocked_403, –±–µ—Ä–µ–º –ª—é–±—É—é pending –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞
                db.get(`SELECT * FROM vacancy_links WHERE response_status = 'pending' ORDER BY id LIMIT 1`, (err2, pendingVacancy) => {
                    if (err2) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è pending –≤–∞–∫–∞–Ω—Å–∏–∏:', err2);
                        startRetrySystem();
                        return;
                    }
                    
                    if (!pendingVacancy) {
                        console.log('‚ö†Ô∏è –ù–µ—Ç –∏ pending –≤–∞–∫–∞–Ω—Å–∏–π - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º retry');
                        startRetrySystem();
                        return;
                    }
                    
                    console.log(`üîó –ò—Å–ø–æ–ª—å–∑—É–µ–º pending –≤–∞–∫–∞–Ω—Å–∏—é –¥–ª—è —Ç–µ—Å—Ç–∞: ${pendingVacancy.title}`);
                    
                    // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
                    db.run(`UPDATE vacancy_links SET is_being_tested = 1 WHERE id = ?`, [pendingVacancy.id], (updateErr) => {
                        if (updateErr) {
                            console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', updateErr);
                        } else {
                            console.log('‚úÖ Pending –≤–∞–∫–∞–Ω—Å–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–∞—è (is_being_tested = 1)');
                        }
                        
                        console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏');
                        
                        // –ó–∞–ø—É—Å–∫–∞–µ–º retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
                        if (!retryMonitoringInterval) {
                            startRetryTabMonitoring();
                        }
                        
                        // Fallback –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
                    });
                });
                return;
            }
            
            console.log(`üîó –ù–∞–π–¥–µ–Ω–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –¥–ª—è —Ç–µ—Å—Ç–∞: ${blockedVacancy.title}`);
            console.log('üÜî ID –≤–∞–∫–∞–Ω—Å–∏–∏:', blockedVacancy.id);
            console.log('üìä –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:', blockedVacancy.response_status);
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            console.log('üìù –ü–æ–º–µ—á–∞–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é...');
            db.run(`UPDATE vacancy_links SET is_being_tested = 1 WHERE id = ?`, [blockedVacancy.id], (updateErr) => {
                if (updateErr) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', updateErr);
                } else {
                    console.log('‚úÖ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–∞—è (is_being_tested = 1)');
                    console.log('üìä –°—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–µ—Ç—Å—è blocked_403, —Å—á–µ—Ç—á–∏–∫ –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç—Å—è');
                }
                
                console.log('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏');
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
                if (!retryMonitoringInterval) {
                    startRetryTabMonitoring();
                }
                
                console.log('üîÑ –ù–ï –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º retry - –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏');
                
                // Fallback –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω - retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ
            });
        });
        
    }, 60000); // 60 —Å–µ–∫—É–Ω–¥
    
    console.log('‚è∞ Timeout —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ 60 —Å–µ–∫—É–Ω–¥, –æ–∂–∏–¥–∞–µ–º...');
}

// –ù–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è retry —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
function startRetryTabMonitoring() {
    console.log('üîÑ === –ó–ê–ü–£–°–ö RETRY –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê ===');
    
    if (retryMonitoringInterval) {
        console.log('‚è∞ –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
        clearInterval(retryMonitoringInterval);
        retryMonitoringInterval = null;
    }
    
    console.log('üîç –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π...');
    
    retryMonitoringInterval = setInterval(() => {
        if (!isBlocked) {
            console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥');
            stopRetryTabMonitoring();
            return;
        }
        
        // –ò—â–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏ (—Å —Ñ–ª–∞–≥–æ–º is_being_tested = 1)
        db.all(`SELECT * FROM vacancy_links WHERE is_being_tested = 1`, (err, testingVacancies) => {
            if (err) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π:', err);
                return;
            }
            
            if (testingVacancies.length === 0) {
                return; // –ù–µ—Ç —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
            }
            
            console.log(`üîç –ù–∞–π–¥–µ–Ω–æ ${testingVacancies.length} —Ç–µ—Å—Ç–∏—Ä—É–µ–º—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π`);
            
            testingVacancies.forEach(vacancy => {
                console.log(`üöÄ –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é –≤–∞–∫–∞–Ω—Å–∏—é: ${vacancy.title} (ID: ${vacancy.id})`);
                
                // –°–†–ê–ó–£ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –æ—Ç–∫—Ä—ã—Ç–∏—è
                db.run(`UPDATE vacancy_links SET is_being_tested = 0 WHERE id = ?`, [vacancy.id], (err) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞:', err);
                    } else {
                        console.log(`‚úÖ –§–ª–∞–≥ is_being_tested —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ID: ${vacancy.id}`);
                    }
                });
                
                // –í—Ä–µ–º–µ–Ω–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–æ—Å—Ç–æ–º—É –º–µ—Ç–æ–¥—É - –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ processing
                db.run(`UPDATE vacancy_links SET response_status = 'processing' WHERE id = ?`, [vacancy.id], (err) => {
                    if (err) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –Ω–∞ processing:', err);
                    } else {
                        console.log(`‚úÖ –í–∞–∫–∞–Ω—Å–∏—è ID: ${vacancy.id} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ processing –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è dashboard'–æ–º`);
                    }
                });
            });
        });
        
    }, 2000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
}

function stopRetryTabMonitoring() {
    if (retryMonitoringInterval) {
        console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∫–∞ retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞');
        clearInterval(retryMonitoringInterval);
        retryMonitoringInterval = null;
    }
}

// ============ ENDPOINTS –î–õ–Ø –ë–õ–û–ö–ò–†–û–í–ö–ò ============

// –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é (403)
app.post('/api/vacancy/blocked', (req, res) => {
    const { vacancyId } = req.body;
    
    if (!vacancyId) {
        return res.status(400).json({ error: 'vacancyId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
    }
    
    db.run(`UPDATE vacancy_links SET response_status = 'blocked_403' WHERE id = ?`, [vacancyId], (err) => {
        if (err) {
            return res.status(500).json({ error: err.message });
        }
        
        console.log(`üö´ –í–∞–∫–∞–Ω—Å–∏—è ID${vacancyId} –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è (403)`);
        
        // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏ —ç—Ç–æ –±—ã–ª retry —Ç–µ—Å—Ç - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º retry
        if (isBlocked) {
            console.log('üîÑ Retry —Ç–µ—Å—Ç –Ω–µ—É–¥–∞—á–µ–Ω - —Ç–µ—Å—Ç–æ–≤–∞—è –≤–∞–∫–∞–Ω—Å–∏—è —Ç–æ–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
            console.log('‚è∞ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º retry —Å–∏—Å—Ç–µ–º—É –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é –º–∏–Ω—É—Ç—É');
            startRetrySystem();
        }
        
        res.json({ success: true, message: '–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–∞—è' });
    });
});

// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
app.get('/api/is-blocked', (req, res) => {
    res.json({ 
        isBlocked,
        blockedSince,
        nextRetry: retryTimeout ? new Date(Date.now() + 60000) : null
    });
});

// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
app.post('/api/set-blocked', (req, res) => {
    isBlocked = true;
    blockedSince = new Date();
    
    console.log(`üö´ –°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –≤ ${blockedSince.toLocaleString()}`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º—É retry
    startRetrySystem();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    startRetryTabMonitoring();
    
    res.json({ success: true, message: '–°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –∑–∞–ø—É—â–µ–Ω–∞ —Å–∏—Å—Ç–µ–º–∞ retry' });
});

// –°–Ω—è—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –≤—Ä—É—á–Ω—É—é
app.post('/api/clear-blocked', (req, res) => {
    isBlocked = false;
    blockedSince = null;
    
    if (retryTimeout) {
        clearTimeout(retryTimeout);
        retryTimeout = null;
    }
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    stopRetryTabMonitoring();
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Å–µ —Ñ–ª–∞–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    db.run(`UPDATE vacancy_links SET is_being_tested = 0 WHERE is_being_tested = 1`, (err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
        } else {
            console.log('‚úÖ –í—Å–µ —Ñ–ª–∞–≥–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω—ã');
        }
    });
    
    console.log('‚úÖ –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞ –≤—Ä—É—á–Ω—É—é');
    res.json({ success: true, message: '–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–Ω—è—Ç–∞' });
});

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ retry –ø—Ä–æ–≤–µ—Ä–∫–∏ (—Å–∫–∏–ø–Ω—É—Ç—å –º–∏–Ω—É—Ç—É –æ–∂–∏–¥–∞–Ω–∏—è)
app.post('/api/force-retry', (req, res) => {
    console.log('üîî === FORCE-RETRY ENDPOINT –í–´–ó–í–ê–ù ===');
    console.log('üìä –¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã:');
    console.log('   - isBlocked:', isBlocked);
    console.log('   - blockedSince:', blockedSince);
    console.log('   - retryTimeout —Å—É—â–µ—Å—Ç–≤—É–µ—Ç:', !!retryTimeout);
    
    if (!isBlocked) {
        console.log('‚ùå –í–´–•–û–î: –°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞');
        return res.json({ success: false, message: '–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞' });
    }
    
    console.log('‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ retry –ø—Ä–æ–≤–µ—Ä–∫–∏...');
    
    // –û—Ç–º–µ–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–∞–π–º–µ—Ä
    if (retryTimeout) {
        clearTimeout(retryTimeout);
        retryTimeout = null;
    }
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É —Å—Ä–∞–∑—É
    setTimeout(() => {
        if (!isBlocked) {
            return; // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –±—ã–ª–∞ —Å–Ω—è—Ç–∞
        }
        
        console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏...');
        
        // –ü–æ–ª—É—á–∞–µ–º –æ–¥–Ω—É –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é
        db.get(`SELECT * FROM vacancy_links WHERE response_status = 'blocked_403' ORDER BY id LIMIT 1`, (err, blockedVacancy) => {
            if (err) {
                console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', err);
                startRetrySystem(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–∏—Ç–º—É
                return;
            }
            
            if (!blockedVacancy) {
                console.log('‚ö†Ô∏è –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è');
                startRetrySystem(); // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–±—ã—á–Ω–æ–º—É —Ä–∏—Ç–º—É
                return;
            }
            
            console.log(`üîó –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é: ${blockedVacancy.title}`);
            console.log('üÜî ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:', blockedVacancy.id);
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é –ë–ï–ó –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
            console.log('üìù FORCE-RETRY: –ü–æ–º–µ—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º—É—é...');
            db.run(`UPDATE vacancy_links SET is_being_tested = 1 WHERE id = ?`, [blockedVacancy.id], function(updateErr) {
                if (updateErr) {
                    console.error('‚ùå FORCE-RETRY: –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–ª–∞–≥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', updateErr);
                } else {
                    console.log('‚úÖ FORCE-RETRY: –í–∞–∫–∞–Ω—Å–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç–µ—Å—Ç–∏—Ä—É–µ–º–∞—è (is_being_tested = 1)');
                    console.log('üìä FORCE-RETRY: –°—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–µ—Ç—Å—è blocked_403, —Å—á–µ—Ç—á–∏–∫ –ù–ï –∏–∑–º–µ–Ω—è–µ—Ç—Å—è');
                    console.log('üìä FORCE-RETRY: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã—Ö —Å—Ç—Ä–æ–∫:', this.changes);
                }
                
                console.log('üöÄ FORCE-RETRY: –ó–∞–ø—É—Å–∫–∞–µ–º retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ç–µ—Å—Ç–∏—Ä—É–µ–º–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏');
                
                // –ó–∞–ø—É—Å–∫–∞–µ–º retry –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –µ—Å–ª–∏ –æ–Ω –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
                if (!retryMonitoringInterval) {
                    startRetryTabMonitoring();
                }
                
                console.log('‚è∞ FORCE-RETRY: –û–∂–∏–¥–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º retry');
            });
        });
        
    }, 1000); // –ó–∞–¥–µ—Ä–∂–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –¥–ª—è UI
    
    res.json({ success: true, message: 'Retry –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ' });
});

// API –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–∫–ª–∞–¥–æ–∫
app.post('/api/sync-opened-tabs', (req, res) => {
    const { action, vacancyId } = req.body;
    
    if (action === 'add') {
        openedVacancyTabs.add(vacancyId);
    } else if (action === 'delete') {
        openedVacancyTabs.delete(vacancyId);
    } else if (action === 'clear') {
        openedVacancyTabs.clear();
    }
    
    res.json({ success: true });
});

// Endpoint –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤–∞–∫–∞–Ω—Å–∏–π
app.post('/test-vacancy', (req, res) => {
    const { vacancyId, url, title } = req.body;
    
    console.log(`üß™ RETRY TEST: –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–∫–∞–Ω—Å–∏–∏ ${title} (ID: ${vacancyId})`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—É –∫–æ—Ç–æ—Ä–∞—è –æ—Ç–∫—Ä–æ–µ—Ç –≤–∞–∫–∞–Ω—Å–∏—é –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ
    res.send(`
<!DOCTYPE html>
<html>
<head>
    <title>Retry Test - ${title}</title>
    <script>
        console.log('üß™ RETRY TEST: –û—Ç–∫—Ä—ã–≤–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –≤–∞–∫–∞–Ω—Å–∏—é');
        window.open('${url}', '_blank');
        
        // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã –∑–∞–∫—Ä—ã–≤–∞–µ–º —ç—Ç—É —Å–ª—É–∂–µ–±–Ω—É—é –≤–∫–ª–∞–¥–∫—É
        setTimeout(() => {
            console.log('üß™ RETRY TEST: –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–ª—É–∂–µ–±–Ω—É—é –≤–∫–ª–∞–¥–∫—É');
            window.close();
        }, 3000);
    </script>
</head>
<body>
    <h3>üß™ Retry Test</h3>
    <p>–¢–µ—Å—Ç–∏—Ä—É–µ–º –≤–∞–∫–∞–Ω—Å–∏—é: <strong>${title}</strong></p>
    <p>ID: ${vacancyId}</p>
    <p>–í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç—Å—è –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ...</p>
    <script>
        // –£–±–∏—Ä–∞–µ–º —Ñ–ª–∞–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ
        setTimeout(() => {
            fetch('/api/clear-retry-test', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ vacancyId: ${vacancyId} })
            }).then(() => {
                console.log('üß™ RETRY TEST: –§–ª–∞–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –ø–æ —Ç–∞–π–º–∞—É—Ç—É');
            }).catch(err => {
                console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            });
        }, 30000);
    </script>
</body>
</html>
    `);
});

// –°–±—Ä–æ—Å —Ñ–ª–∞–≥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
app.post('/api/clear-retry-test', (req, res) => {
    const { vacancyId } = req.body;
    
    db.run(`UPDATE vacancy_links SET is_being_tested = 0 WHERE id = ?`, [vacancyId], (err) => {
        if (err) {
            console.error('‚ùå –û—à–∏–±–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–ª–∞–≥–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', err);
            return res.json({ success: false, error: err.message });
        }
        
        console.log(`‚úÖ –§–ª–∞–≥ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–±—Ä–æ—à–µ–Ω –¥–ª—è –≤–∞–∫–∞–Ω—Å–∏–∏ ID: ${vacancyId}`);
        res.json({ success: true });
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
process.on('SIGINT', () => {
    console.log('\n–ó–∞–∫—Ä—ã—Ç–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...');
    db.close();
    process.exit(0);
});

app.listen(PORT, () => {
    console.log(`üöÄ Menancing Server –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìä Dashboard: http://localhost:${PORT}`);
    console.log(`üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
});