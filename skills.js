async function addAllSkillsSimple() {
    const skills = [
      "JavaScript",
      "TypeScript",
      "React",
      "Git",
      "HTML",
      "CSS",
      "CSS3",
      "HTML5",
      "REST API",
      "VueJS",
      "Redux",
      "Angular",
      "Vue.js",
      "Webpack",
      "Node.js",
      "Frontend",
      "Vue",
      "JS",
      "REST",
      "Docker",
      "Figma",
      "Sass",
      "SCSS",
      "–ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞",
      "–û–û–ü",
      "GitHub",
      "–ö—Ä–æ—Å—Å–±—Ä–∞—É–∑–µ—Ä–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞",
      "API",
      "PostgreSQL",
      "React Native"
    ];

    const input = document.querySelector('[data-qa="chips-trigger-input"]');
    let success = 0;
    let failed = 0;

    for (let i = 0; i < skills.length; i++) {
      const skill = skills[i];
      console.log(`${i + 1}/${skills.length}: ${skill}`);

      try {
        // –í–≤–æ–¥ —á–µ—Ä–µ–∑ React
        const reactKey = Object.keys(input).find(key => key.startsWith('__reactFiber'));

        if (reactKey) {
          input.value = '';
          input.focus();

          const nativeInputValueSetter = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, "value").set;
          nativeInputValueSetter.call(input, skill);

          const event = new Event('input', { bubbles: true });
          event.simulated = true;

          const tracker = input._valueTracker;
          if (tracker) {
            tracker.setValue('');
          }

          input.dispatchEvent(event);
        }

        // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è React
        await new Promise(resolve => setTimeout(resolve, 100));

        // –°—Ä–∞–∑—É –∂–º–µ–º Enter
        input.focus();
        input.dispatchEvent(new KeyboardEvent('keydown', {
          key: 'Enter',
          code: 'Enter',
          keyCode: 13,
          which: 13,
          bubbles: true
        }));

        console.log(`‚úì –î–æ–±–∞–≤–ª–µ–Ω: ${skill}`);
        success++;

        // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –Ω–∞–≤—ã–∫–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 300));

      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å ${skill}:`, error);
        failed++;
      }
    }

    console.log(`\nüéâ –ì–æ—Ç–æ–≤–æ! –£—Å–ø–µ—à–Ω–æ: ${success}, –ù–µ—É–¥–∞—á–Ω–æ: ${failed}`);
  }

  // –ó–∞–ø—É—Å–∫
  addAllSkillsSimple();