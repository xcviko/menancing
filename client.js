// ==UserScript==
// @name         Menancing Client - HH.ru Parser
// @namespace    https://github.com/xcviko/menancing
// @version      2.2.0
// @description  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π —Å hh.ru
// @author       xcviko
// @match        https://hh.ru/*
// @grant        none
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';
    
    const SERVER_URL = 'http://localhost:3000';
    const TARGET_LINKS = 300;
    let isParsingActive = false;
    let isRespondingActive = false;
    let currentVacancy = null;
    
    console.log('üöÄ Menancing Parser v2.1 –∑–∞–≥—Ä—É–∂–µ–Ω');

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    const config = {
        autoStart: true,
        delay: 2000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        scrollDelay: 800, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∞–º–∏ –¥–ª—è lazy loading
        maxScrollAttempts: 20, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        targetCards: 50, // –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        currentPage: 0
    };

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–¥–æ 50 –∏–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞)
    async function scrollUntilAllCardsLoaded() {
        console.log('üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫...');
        
        let attempts = 0;
        let previousCount = 0;
        let stableCount = 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ –Ω–∞—á–∞–ª–æ
        let initialCount = document.querySelectorAll('[data-qa="vacancy-serp__vacancy"]').length;
        console.log(`üìã –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–∏–¥–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${initialCount}`);
        
        // –ï—Å–ª–∏ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (initialCount >= config.targetCards) {
            console.log('‚úÖ –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫');
            return initialCount;
        }
        
        while (attempts < config.maxScrollAttempts) {
            const currentCount = document.querySelectorAll('[data-qa="vacancy-serp__vacancy"]').length;
            console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${currentCount}/${config.targetCards}`);
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
            if (currentCount >= config.targetCards) {
                console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫');
                return currentCount;
            }
            
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
            if (currentCount === previousCount) {
                stableCount++;
                if (stableCount >= 3) {
                    console.log(`‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è. –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. –ò—Ç–æ–≥–æ: ${currentCount}`);
                    return currentCount;
                }
            } else {
                stableCount = 0;
            }
            
            previousCount = currentCount;
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –Ω–∞ –≤—ã—Å–æ—Ç—É —ç–∫—Ä–∞–Ω–∞
            window.scrollBy(0, window.innerHeight);
            await sleep(config.scrollDelay);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await sleep(300);
            
            attempts++;
        }
        
        const finalCount = document.querySelectorAll('[data-qa="vacancy-serp__vacancy"]').length;
        console.log(`üìã –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${finalCount}`);
        return finalCount;
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function isLastPage() {
        // –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        const pageButtons = document.querySelectorAll('[data-qa="pager-page"]');
        const currentPage = getCurrentPageNumber();
        
        if (pageButtons.length === 0) {
            console.log('üîç –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
            return true;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        const maxPage = Math.max(...Array.from(pageButtons).map(btn => {
            const href = btn.getAttribute('href');
            const pageMatch = href.match(/page=(\d+)/);
            return pageMatch ? parseInt(pageMatch[1]) : 0;
        }));
        
        console.log(`üîç –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${currentPage}, –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${maxPage}`);
        return currentPage >= maxPage;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Ç–∫–ª–∏–∫ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function parseCurrentPage() {
        console.log('üîç –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        
        const vacancyCards = document.querySelectorAll('[data-qa="vacancy-serp__vacancy"]');
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${vacancyCards.length}`);
        
        const links = [];
        
        vacancyCards.forEach((card, index) => {
            const titleElement = card.querySelector('a[data-qa="serp-item__title"]');
            
            if (titleElement && titleElement.href) {
                links.push({
                    title: titleElement.textContent.trim(),
                    url: titleElement.href
                });
            }
        });
        
        console.log(`‚úÖ –°–æ–±—Ä–∞–Ω–æ ${links.length} —Å—Å—ã–ª–æ–∫`);
        return links;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async function sendLinksToServer(links, pageNumber) {
        try {
            const response = await fetch(`${SERVER_URL}/api/links`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    links: links,
                    pageNumber: pageNumber
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', data.message);
            return data;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
    async function getStats() {
        try {
            const response = await fetch(`${SERVER_URL}/api/stats`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            return data;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    function goToNextPage() {
        const url = new URL(window.location.href);
        const currentPage = parseInt(url.searchParams.get('page') || '0');
        const nextPage = currentPage + 1;
        
        url.searchParams.set('page', nextPage);
        
        console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${nextPage + 1}`);
        window.location.href = url.toString();
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞ —Å lazy loading
    async function startAutoParsing() {
        if (isParsingActive) {
            console.log('‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω');
            return;
        }
        
        isParsingActive = true;
        console.log('üéØ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = await getStats();
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.total}/${stats.target} (${stats.progress}%)`);
            
            if (stats.completed) {
                console.log('üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.');
                showCompletionMessage();
                return;
            }
            
            // –ù–û–í–û–ï: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ lazy loading...');
            const totalCards = await scrollUntilAllCardsLoaded();
            
            // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const links = parseCurrentPage();
            
            if (links.length === 0) {
                console.log('‚ùå –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
                isParsingActive = false;
                return;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const currentPageNum = getCurrentPageNumber();
            await sendLinksToServer(links, currentPageNum);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const newStats = await getStats();
            console.log(`üìä –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${newStats.total}/${newStats.target}`);
            
            if (newStats.completed) {
                console.log('üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.');
                isParsingActive = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                showCompletionMessage();
                return;
            }
            
            // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if (totalCards < config.targetCards || isLastPage()) {
                console.log('üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π');
                console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${newStats.total} —Å—Å—ã–ª–æ–∫ —Å–æ–±—Ä–∞–Ω–æ`);
                isParsingActive = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                showCompletionMessage(`–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω! –°–æ–±—Ä–∞–Ω–æ ${newStats.total} —Å—Å—ã–ª–æ–∫.`);
                return;
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ ${config.delay}–º—Å...`);
            setTimeout(() => {
                goToNextPage();
            }, config.delay);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            if (error.message.includes('fetch')) {
                console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm start');
            }
            
            isParsingActive = false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function getCurrentPageNumber() {
        const url = new URL(window.location.href);
        return parseInt(url.searchParams.get('page') || '0');
    }

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    function showCompletionMessage(customMessage = 'üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω! –°–æ–±—Ä–∞–Ω–æ 300 —Å—Å—ã–ª–æ–∫.') {
        const message = document.createElement('div');
        message.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #4CAF50;
            color: white;
            padding: 20px;
            border-radius: 8px;
            z-index: 10000;
            font-size: 18px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            text-align: center;
            max-width: 400px;
        `;
        message.innerHTML = customMessage;
        document.body.appendChild(message);
        
        setTimeout(() => {
            if (document.body.contains(message)) {
                document.body.removeChild(message);
            }
        }, 5000);
    }

    // ============ –ê–í–¢–û–û–¢–ö–õ–ò–ö–ò ============
    
    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏, –æ—Ç–∫—Ä—ã—Ç–æ–π –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞
    async function processVacancyFromDashboard() {
        console.log('üéØ –ê–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏, –æ—Ç–∫—Ä—ã—Ç–æ–π –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º URL —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const currentUrl = window.location.href;
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ URL
            const urlParts = currentUrl.match(/\/vacancy\/(\d+)/);
            const vacancyId = urlParts ? urlParts[1] : null;
            
            if (!vacancyId) {
                console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ URL');
                window.close();
                return;
            }
            
            console.log('üîç –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏—é —Å ID:', vacancyId);
            
            // –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –±–∞–∑–µ –ø–æ ID
            const response = await fetch(`${SERVER_URL}/api/links`);
            const data = await response.json();
            
            const vacancy = data.links.find(link => 
                link.url.includes(`/vacancy/${vacancyId}`) || 
                link.url.includes(vacancyId)
            );
            
            if (!vacancy) {
                console.log('‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                window.close();
                return;
            }
            
            console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é: ${vacancy.title}`);
            
            // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"
            const responseButton = await waitForElement('a[data-qa="vacancy-response-link-top"]');
            
            if (!responseButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                await markVacancyAsFailed(vacancy.id, '–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                window.close();
                return;
            }
            
            console.log('‚úì –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞–µ–º...');
            responseButton.click();
            
            // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª–∏–∫–µ
            await sleep(2000);
            const successElement = Array.from(document.querySelectorAll('*')).find(el => 
                el.textContent && el.textContent.replace(/[\s\u00A0]+/g, ' ').trim() === '–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å'
            );
            
            if (successElement) {
                console.log('üéâ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –ø–æ–º–µ—Ç–∏—Ç—å completed + –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â—É—é
                await fetch(`${SERVER_URL}/api/vacancy/completed-and-next`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ vacancyId: vacancy.id })
                });
            } else {
                console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
                await markVacancyAsFailed(vacancy.id, '–û—Ç–∫–ª–∏–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è');
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É
            setTimeout(() => {
                window.close();
            }, 1000);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
            setTimeout(() => {
                window.close();
            }, 1000);
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    async function getNextVacancy() {
        try {
            const response = await fetch(`${SERVER_URL}/api/next-vacancy`);
            const data = await response.json();
            return data.vacancy;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
            return null;
        }
    }
    
    // –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    async function markVacancyAsProcessing(vacancyId) {
        try {
            await fetch(`${SERVER_URL}/api/vacancy/start`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ vacancyId })
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∫ processing:', error);
        }
    }
    
    // –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ "–æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å"
    async function markVacancyAsCompleted(vacancyId) {
        try {
            await fetch(`${SERVER_URL}/api/vacancy/complete`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ vacancyId })
            });
            console.log('‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∫ completed:', error);
        }
    }
    
    // –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ "–æ—à–∏–±–∫–∞"
    async function markVacancyAsFailed(vacancyId, reason) {
        try {
            await fetch(`${SERVER_URL}/api/vacancy/failed`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ vacancyId, reason })
            });
            console.log('‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è:', reason);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∫ failed:', error);
        }
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    async function waitForElement(selector, maxAttempts = 20) {
        for (let i = 0; i < maxAttempts; i++) {
            const element = document.querySelector(selector);
            if (element) {
                return element;
            }
            await sleep(500);
        }
        return null;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –µ—ë —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—Ç–æ–ª—å–∫–æ –∫–ª–∏–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    async function processVacancyOnPage(vacancy) {
        console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${vacancy.title}`);
        
        // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"
        const responseButton = await waitForElement('a[data-qa="vacancy-response-link-top"]');
        
        if (!responseButton) {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            await markVacancyAsFailed(vacancy.id, '–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return false;
        }
        
        console.log('‚úì –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞–µ–º...');
        responseButton.click();
        
        // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª–∏–∫–µ
        await sleep(2000); // –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
        const successElement = Array.from(document.querySelectorAll('*')).find(el => 
            el.textContent && el.textContent.replace(/[\s\u00A0]+/g, ' ').trim() === '–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å'
        );
        
        if (successElement) {
            console.log('üéâ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            await markVacancyAsCompleted(vacancy.id);
            return true;
        } else {
            console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            await markVacancyAsFailed(vacancy.id, '–û—Ç–∫–ª–∏–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è');
            return false;
        }
    }
    
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    window.menancingStart = startAutoParsing;
    window.menancingParse = parseCurrentPage;
    window.menancingStats = getStats;
    window.menancingScroll = scrollUntilAllCardsLoaded;
    window.menancingProcessVacancy = processVacancyFromDashboard; // –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    window.menancingStop = () => {
        isParsingActive = false;
        console.log('‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    };
    
    // –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    window.menancingClickResponse = function() {
        console.log('üéØ –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        const button = Array.from(document.querySelectorAll('span')).find(span => 
            span.textContent.trim() === '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è' && 
            span.className.includes('magritte-button__label')
        );
        if (button) {
            const parentButton = button.closest('button') || button.closest('[role="button"]') || button.parentElement;
            if (parentButton) {
                console.log('‚úì –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"');
                parentButton.click();
                return true;
            }
        }
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return false;
    };
    
    window.menancingFillTextarea = function(text = "–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏") {
        const textarea = document.querySelector('textarea[data-qa="vacancy-response-popup-form-letter-input"]');
        if (textarea) {
            const nativeValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
            nativeValueSetter.call(textarea, text);
            const event = new Event('input', { bubbles: true });
            textarea.dispatchEvent(event);
            return true;
        }
        return false;
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    function init() {
        const currentUrl = window.location.href;
        const pathname = window.location.pathname;
        
        console.log(`üöÄ Menancing Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${pathname}`);
        
        if (pathname.includes('/search/vacancy') || currentUrl.includes('/search/vacancy')) {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
            console.log('‚úì –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞');
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
            console.log('- menancingStart() - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞');
            console.log('- menancingParse() - –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
            console.log('- menancingStats() - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            console.log('- menancingScroll() - —Ç–µ—Å—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ lazy loading');
            console.log('- menancingStop() - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
            
            // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω
            if (config.autoStart) {
                setTimeout(() => {
                    console.log('ü§ñ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
                    setTimeout(startAutoParsing, 3000);
                }, 1000);
            }
        } else if (pathname.includes('/vacancy/') || currentUrl.includes('/vacancy/')) {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
            console.log('‚úì –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–∞–∫–∞–Ω—Å–∏–∏ - –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∞');
            console.log('üìç URL:', currentUrl);
            console.log('üìç Pathname:', pathname);
            
            setTimeout(async () => {
                console.log('üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∞–∫–∞–Ω—Å–∏–∏...');
                await processVacancyFromDashboard();
            }, 2000);
        } else {
            console.log('‚úì –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º –¥–æ–º–µ–Ω–µ hh.ru');
            console.log('üìç –ü—É—Ç—å:', pathname);
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
            console.log('- menancingStop() - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
        }
    }

    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();