// ==UserScript==
// @name         Menancing Client - HH.ru Parser
// @namespace    https://github.com/xcviko/menancing
// @version      2.2.1
// @description  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–∞—Ä—Å–∏–Ω–≥ –≤–∞–∫–∞–Ω—Å–∏–π —Å hh.ru
// @author       xcviko
// @match        https://hh.ru/*
// @updateURL    https://raw.githubusercontent.com/xcviko/menancing/main/client.js
// @downloadURL  https://raw.githubusercontent.com/xcviko/menancing/main/client.js
// @homepageURL  https://github.com/xcviko/menancing
// @grant        none
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';
    
    const SERVER_URL = 'http://localhost:3000';
    const TARGET_LINKS = 300;
    let isParsingActive = false;
    let isRespondingActive = false;
    let currentVacancy = null;
    
    console.log('üöÄ Menancing Parser v2.1 –∑–∞–≥—Ä—É–∂–µ–Ω');

    // –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞
    const config = {
        autoStart: true,
        delay: 2000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        scrollDelay: 800, // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∞–º–∏ –¥–ª—è lazy loading
        maxScrollAttempts: 20, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
        targetCards: 50, // –¶–µ–ª–µ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        currentPage: 0
    };

    // –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è —É—Å–ª–æ–≤–∏—è —Å –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
    async function waitForCondition(checkFunction, maxAttempts = 600, intervalMs = 100) {
        for (let attempt = 0; attempt < maxAttempts; attempt++) {
            try {
                const result = checkFunction();
                if (result) {
                    return result;
                }
            } catch (error) {
                // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –≤ checkFunction –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            }
            await sleep(intervalMs);
        }
        return false;
    }

    // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ (–¥–æ 50 –∏–ª–∏ –¥–æ –∫–æ–Ω—Ü–∞)
    async function scrollUntilAllCardsLoaded() {
        console.log('üìú –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫...');
        
        let attempts = 0;
        let previousCount = 0;
        let stableCount = 0;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –±–µ–∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ –Ω–∞—á–∞–ª–æ
        let initialCount = document.querySelectorAll('[data-qa="vacancy-serp__vacancy"]').length;
        console.log(`üìã –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –≤–∏–¥–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${initialCount}`);
        
        // –ï—Å–ª–∏ —É–∂–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if (initialCount >= config.targetCards) {
            console.log('‚úÖ –£–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫');
            return initialCount;
        }
        
        while (attempts < config.maxScrollAttempts) {
            const currentCount = document.querySelectorAll('[data-qa="vacancy-serp__vacancy"]').length;
            console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${currentCount}/${config.targetCards}`);
            
            // –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ —Ü–µ–ª–µ–≤–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–∞—Ä—Ç–æ—á–µ–∫
            if (currentCount >= config.targetCards) {
                console.log('‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫');
                return currentCount;
            }
            
            // –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ä—Ç–æ—á–µ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–æ–¥—Ä—è–¥
            if (currentCount === previousCount) {
                stableCount++;
                if (stableCount >= 3) {
                    console.log(`‚ö†Ô∏è –ö–∞—Ä—Ç–æ—á–∫–∏ –±–æ–ª—å—à–µ –Ω–µ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è. –í–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞. –ò—Ç–æ–≥–æ: ${currentCount}`);
                    return currentCount;
                }
            } else {
                stableCount = 0;
            }
            
            previousCount = currentCount;
            
            // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –≤–Ω–∏–∑ –Ω–∞ –≤—ã—Å–æ—Ç—É —ç–∫—Ä–∞–Ω–∞
            window.scrollBy(0, window.innerHeight);
            await sleep(config.scrollDelay);
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            await sleep(300);
            
            attempts++;
        }
        
        const finalCount = document.querySelectorAll('[data-qa="vacancy-serp__vacancy"]').length;
        console.log(`üìã –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ò—Ç–æ–≥–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${finalCount}`);
        return finalCount;
    }

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function isLastPage() {
        // –ú–µ—Ç–æ–¥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏—é
        const pageButtons = document.querySelectorAll('[data-qa="pager-page"]');
        const currentPage = getCurrentPageNumber();
        
        if (pageButtons.length === 0) {
            console.log('üîç –ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ - –≤–æ–∑–º–æ–∂–Ω–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
            return true;
        }
        
        // –ù–∞—Ö–æ–¥–∏–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
        const maxPage = Math.max(...Array.from(pageButtons).map(btn => {
            const href = btn.getAttribute('href');
            const pageMatch = href.match(/page=(\d+)/);
            return pageMatch ? parseInt(pageMatch[1]) : 0;
        }));
        
        console.log(`üîç –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${currentPage}, –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è: ${maxPage}`);
        return currentPage >= maxPage;
    }

    // –ü–∞—Ä—Å–∏–Ω–≥ —Å—Å—ã–ª–æ–∫ –Ω–∞ –æ—Ç–∫–ª–∏–∫ —Å —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function parseCurrentPage() {
        console.log('üîç –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É...');
        
        const vacancyCards = document.querySelectorAll('[data-qa="vacancy-serp__vacancy"]');
        console.log(`üìã –ù–∞–π–¥–µ–Ω–æ –∫–∞—Ä—Ç–æ—á–µ–∫: ${vacancyCards.length}`);
        
        const links = [];
        
        vacancyCards.forEach((card, index) => {
            const titleElement = card.querySelector('a[data-qa="serp-item__title"]');
            
            if (titleElement && titleElement.href) {
                links.push({
                    title: titleElement.textContent.trim(),
                    url: titleElement.href
                });
            }
        });
        
        console.log(`‚úÖ –°–æ–±—Ä–∞–Ω–æ ${links.length} —Å—Å—ã–ª–æ–∫`);
        return links;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    async function sendLinksToServer(links, pageNumber) {
        try {
            const response = await fetch(`${SERVER_URL}/api/links`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    links: links,
                    pageNumber: pageNumber
                })
            });
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            console.log('üì§ –î–∞–Ω–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã:', data.message);
            return data;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
            throw error;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞
    async function getStats() {
        try {
            const response = await fetch(`${SERVER_URL}/api/stats`);
            
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            const data = await response.json();
            return data;
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            throw error;
        }
    }

    // –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    function goToNextPage() {
        const url = new URL(window.location.href);
        const currentPage = parseInt(url.searchParams.get('page') || '0');
        const nextPage = currentPage + 1;
        
        url.searchParams.set('page', nextPage);
        
        console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É ${nextPage + 1}`);
        window.location.href = url.toString();
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞ —Å lazy loading
    async function startAutoParsing() {
        if (isParsingActive) {
            console.log('‚ö†Ô∏è –ü–∞—Ä—Å–∏–Ω–≥ —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω');
            return;
        }
        
        isParsingActive = true;
        console.log('üéØ –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞...');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const stats = await getStats();
            console.log(`üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${stats.total}/${stats.target} (${stats.progress}%)`);
            
            if (stats.completed) {
                console.log('üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.');
                showCompletionMessage();
                return;
            }
            
            // –ù–û–í–û–ï: –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
            console.log('‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ —á–µ—Ä–µ–∑ lazy loading...');
            const totalCards = await scrollUntilAllCardsLoaded();
            
            // –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            const links = parseCurrentPage();
            
            if (links.length === 0) {
                console.log('‚ùå –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –Ω–µ—Ç —Å—Å—ã–ª–æ–∫ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞');
                isParsingActive = false;
                return;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            const currentPageNum = getCurrentPageNumber();
            await sendLinksToServer(links, currentPageNum);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const newStats = await getStats();
            console.log(`üìä –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${newStats.total}/${newStats.target}`);
            
            if (newStats.completed) {
                console.log('üéâ –¶–µ–ª—å –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–∞! –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.');
                isParsingActive = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                showCompletionMessage();
                return;
            }
            
            // –ù–û–í–û–ï: –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ª–∏ —ç—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            if (totalCards < config.targetCards || isLastPage()) {
                console.log('üèÅ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π');
                console.log(`üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: ${newStats.total} —Å—Å—ã–ª–æ–∫ —Å–æ–±—Ä–∞–Ω–æ`);
                isParsingActive = false; // –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
                showCompletionMessage(`–ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω! –°–æ–±—Ä–∞–Ω–æ ${newStats.total} —Å—Å—ã–ª–æ–∫.`);
                return;
            }
            
            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
            console.log(`‚û°Ô∏è –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —á–µ—Ä–µ–∑ ${config.delay}–º—Å...`);
            setTimeout(() => {
                goToNextPage();
            }, config.delay);
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞:', error);
            
            // –ï—Å–ª–∏ —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é
            if (error.message.includes('fetch')) {
                console.log('üí° –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: npm start');
            }
            
            isParsingActive = false;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    function getCurrentPageNumber() {
        const url = new URL(window.location.href);
        return parseInt(url.searchParams.get('page') || '0');
    }

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    function showCompletionMessage(customMessage = 'üéâ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω! –°–æ–±—Ä–∞–Ω–æ 300 —Å—Å—ã–ª–æ–∫.') {
        const message = document.createElement('div');
        message.style.cssText = `
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #4CAF50;
            color: white;
            padding: 20px;
            border-radius: 8px;
            z-index: 10000;
            font-size: 18px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.3);
            text-align: center;
            max-width: 400px;
        `;
        message.innerHTML = customMessage;
        document.body.appendChild(message);
        
        setTimeout(() => {
            if (document.body.contains(message)) {
                document.body.removeChild(message);
            }
        }, 5000);
    }

    // ============ –ê–í–¢–û–û–¢–ö–õ–ò–ö–ò ============
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –º–æ–¥–∞–ª–∫–∏ —Å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø–∏—Å—å–º–æ–º
    function detectCoverLetterModal() {
        // –ò—â–µ–º –º–æ–¥–∞–ª–∫—É –ø–æ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É
        const modalOverlay = document.querySelector('[data-qa="modal-overlay"]') || 
                           document.querySelector('.magritte-modal-overlay') ||
                           document.querySelector('[class*="magritte-modal-overlay"]');
        
        if (!modalOverlay) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ textarea –≤–Ω—É—Ç—Ä–∏ –º–æ–¥–∞–ª–∫–∏ (–¥–ª—è —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–∏—Å—å–º–∞)
        const textarea = modalOverlay.querySelector('textarea') ||
                        modalOverlay.querySelector('[data-qa*="letter"]') ||
                        modalOverlay.querySelector('[data-qa*="cover"]');
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç "–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ"
        const hasLetterText = modalOverlay.textContent && 
                             modalOverlay.textContent.includes('–°–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø–∏—Å—å–º–æ');
        
        // –ú–æ–¥–∞–ª–∫–∞ —Å —Å–æ–ø—Ä. –ø–∏—Å—å–º–æ–º –Ω–∞–π–¥–µ–Ω–∞ –µ—Å–ª–∏ –µ—Å—Ç—å textarea –ò–õ–ò —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ç–µ–∫—Å—Ç
        return Boolean(textarea || hasLetterText);
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å 403 –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π
    function detect403Block() {
        const bodyText = document.body.textContent;
        
        // –ì–ª–∞–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º —ç–ª–µ–º–µ–Ω—Ç <b> —Å —Ç–µ–∫—Å—Ç–æ–º 403
        const boldElements = document.querySelectorAll('b');
        for (let boldElement of boldElements) {
            const text = boldElement.textContent.trim();
            if (text.includes('403') && text.includes('Forbidden')) {
                console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ 403 –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!');
                return true;
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –∑–∞–≥–æ–ª–æ–≤–æ–∫ "403 - Forbidden" –≤ —Ç–µ–∫—Å—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (bodyText.includes('403 - Forbidden')) {
            console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ 403 –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!');
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Ç–µ–∫—Å—Ç—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ 403
        if (bodyText.includes("That's an error") && 
            bodyText.includes('Client does not have access rights')) {
            console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ 403 –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!');
            return true;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ URL (–µ—Å–ª–∏ –≤ URL –µ—Å—Ç—å –ø—Ä–∏–∑–Ω–∞–∫–∏ –æ—à–∏–±–∫–∏)
        if (window.location.href.includes('error') && bodyText.includes('403')) {
            console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ 403 –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!');
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ title —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if (document.title.includes('403') || document.title.includes('Forbidden')) {
            console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ 403 –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞!');
            return true;
        }
        
        return false;
    }
    
    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏ (—Å–∫—Ä—ã—Ç–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º)
    function detectUnavailableVacancy() {
        // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —ç–ª–µ–º–µ–Ω—Ç —Å –∫–ª–∞—Å—Å–æ–º account-login-page
        const loginPageElement = document.querySelector('.account-login-page') || 
                                 document.querySelector('[class*="account-login-page"]');
        
        if (!loginPageElement) {
            return false;
        }
        
        console.log('üîç –ù–∞–π–¥–µ–Ω —ç–ª–µ–º–µ–Ω—Ç account-login-page, –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ...');
        
        // –í–Ω—É—Ç—Ä–∏ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏—â–µ–º —Ç–µ–∫—Å—Ç –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏
        const elementText = loginPageElement.textContent;
        
        // –û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –∏—â–µ–º –∫–ª—é—á–µ–≤–æ–π —Ç–µ–∫—Å—Ç
        if (elementText.includes('–í–∞–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ —ç—Ç–∞ –≤–∞–∫–∞–Ω—Å–∏—è')) {
            console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è!');
            return true;
        }
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
        if (elementText.includes('–í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –Ω–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä')) {
            console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è (—á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç –≤—Ö–æ–¥–∞)!');
            return true;
        }
        
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ–∫—Å—Ç –æ –≤—Ö–æ–¥–µ –∫–∞–∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å
        if (elementText.includes('–ª–∏–±–æ –∫–∞–∫ —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞–≤—à–∏–π —ç—Ç—É –≤–∞–∫–∞–Ω—Å–∏—é')) {
            console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è (—á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç —Ä–∞–±–æ—Ç–æ–¥–∞—Ç–µ–ª—è)!');
            return true;
        }
        
        return false;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–≤–∏–∑–∞
    async function handleQuizPage() {
        console.log('üéØ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–≤–∏–∑–∞ - —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏');
        
        try {
            // –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ URL –∏–ª–∏ referrer
            let vacancyId = null;
            
            // –ú–µ—Ç–æ–¥ 1: –ò—â–µ–º ID –≤ —Ç–µ–∫—É—â–µ–º URL
            const currentUrl = window.location.href;
            const urlMatch = currentUrl.match(/vacancy[\/=](\d+)/);
            if (urlMatch) {
                vacancyId = urlMatch[1];
            }
            
            // –ú–µ—Ç–æ–¥ 2: –ò—â–µ–º ID –≤ referrer
            if (!vacancyId && document.referrer) {
                const referrerMatch = document.referrer.match(/vacancy[\/=](\d+)/);
                if (referrerMatch) {
                    vacancyId = referrerMatch[1];
                }
            }
            
            // –ú–µ—Ç–æ–¥ 3: –ò—â–µ–º vacancy ID –∏–∑ localStorage –∏–ª–∏ sessionStorage (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å)
            if (!vacancyId) {
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –ø–æ–∏—Å–∫–∞ ID
                console.log('‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏');
            }
            
            if (vacancyId) {
                console.log(`üîç –ù–∞–π–¥–µ–Ω ID –≤–∞–∫–∞–Ω—Å–∏–∏: ${vacancyId}`);
                
                // –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –±–∞–∑–µ –ø–æ ID
                const response = await fetch(`${SERVER_URL}/api/links`);
                const data = await response.json();
                
                const vacancy = data.links.find(link => 
                    link.url.includes(`/vacancy/${vacancyId}`) || 
                    link.url.includes(vacancyId)
                );
                
                if (vacancy) {
                    console.log(`üìù –û—Ç–º–µ—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é "${vacancy.title}" –∫–∞–∫ —Ç—Ä–µ–±—É—é—â—É—é –∫–≤–∏–∑`);
                    
                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä –æ —Ç–æ–º, —á—Ç–æ —ç—Ç–æ –∫–≤–∏–∑
                    await fetch(`${SERVER_URL}/api/vacancy/requires-quiz`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ vacancyId: vacancy.id })
                    });
                    
                    console.log('‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ —Ç—Ä–µ–±—É—é—â–∞—è –∫–≤–∏–∑');
                } else {
                    console.log('‚ùå –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                }
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            console.log('üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å –∫–≤–∏–∑–æ–º');
            window.close();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–≤–∏–∑–∞:', error);
            window.close();
        }
    }
    
    // –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏, –æ—Ç–∫—Ä—ã—Ç–æ–π –∏–∑ –¥–∞—à–±–æ—Ä–¥–∞
    async function processVacancyFromDashboard() {
        console.log('üéØ === –ù–ê–ß–ê–õ–û –û–ë–†–ê–ë–û–¢–ö–ò –í–ê–ö–ê–ù–°–ò–ò ===');
        console.log('üìç –§—É–Ω–∫—Ü–∏—è: processVacancyFromDashboard()');
        
        try {
            // –ü–æ–ª—É—á–∞–µ–º URL —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            const currentUrl = window.location.href;
            console.log('üîó URL —Å—Ç—Ä–∞–Ω–∏—Ü—ã:', currentUrl);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ URL
            const urlParts = currentUrl.match(/\/vacancy\/(\d+)/);
            const vacancyId = urlParts ? urlParts[1] : null;
            console.log('üÜî –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π ID –≤–∞–∫–∞–Ω—Å–∏–∏:', vacancyId);
            
            if (!vacancyId) {
                console.log('‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∞–∫–∞–Ω—Å–∏–∏ –∏–∑ URL');
                console.log('üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –∏–∑-–∑–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è ID');
                window.close();
                return;
            }
            
            console.log('üîç –≠—Ç–∞–ø A: –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
            
            // –ò—â–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –≤ –±–∞–∑–µ –ø–æ ID
            console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ /api/links...');
            const response = await fetch(`${SERVER_URL}/api/links`);
            const data = await response.json();
            console.log('üìä –ü–æ–ª—É—á–µ–Ω–æ –≤–∞–∫–∞–Ω—Å–∏–π –∏–∑ –±–∞–∑—ã:', data.links.length);
            
            const vacancy = data.links.find(link => 
                link.url.includes(`/vacancy/${vacancyId}`) || 
                link.url.includes(vacancyId)
            );
            
            if (!vacancy) {
                console.log('‚ùå –û–®–ò–ë–ö–ê: –í–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');
                console.log('üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É - –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                window.close();
                return;
            }
            
            console.log(`‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –Ω–∞–π–¥–µ–Ω–∞ –≤ –±–∞–∑–µ: ${vacancy.title}`);
            console.log('üìä –°—Ç–∞—Ç—É—Å –≤–∞–∫–∞–Ω—Å–∏–∏:', vacancy.response_status);
            console.log('üÜî ID –≤ –±–∞–∑–µ:', vacancy.id);
            
            console.log('üîç –≠—Ç–∞–ø B: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –Ω–∞ 403 –±–ª–æ–∫–∏—Ä–æ–≤–∫—É...');
            // –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ 403
            await sleep(2000); // –î–∞—ë–º –≤—Ä–µ–º—è —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è
            console.log('‚è±Ô∏è –ü–∞—É–∑–∞ 2 —Å–µ–∫—É–Ω–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –ø—Ä–æ–≤–µ—Ä—è–µ–º 403...');
            
            const is403 = detect403Block();
            console.log('üö´ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ 403:', is403);
            
            if (is403) {
                console.log('üö´ –û–ë–ù–ê–†–£–ñ–ï–ù–ê 403 –ë–õ–û–ö–ò–†–û–í–ö–ê - –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');
                
                try {
                    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST /api/vacancy/blocked...');
                    // –û—Ç–º–µ—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é
                    const blockedResponse = await fetch(`${SERVER_URL}/api/vacancy/blocked`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ vacancyId: vacancy.id })
                    });
                    const blockedResult = await blockedResponse.json();
                    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç blocked –∑–∞–ø—Ä–æ—Å–∞:', blockedResult);
                    
                    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST /api/set-blocked...');
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    const setBlockedResponse = await fetch(`${SERVER_URL}/api/set-blocked`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const setBlockedResult = await setBlockedResponse.json();
                    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç set-blocked –∑–∞–ø—Ä–æ—Å–∞:', setBlockedResult);
                    
                    console.log('üö´ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –∏–∑-–∑–∞ 403!');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã:', error);
                }
                
                console.log('üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ 403');
                window.close();
                return;
            } else {
                console.log('‚úÖ 403 –ù–ï –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∞–∫–∞–Ω—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π (—Å–∫—Ä—ã—Ç–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º)
                console.log('üîç –≠—Ç–∞–ø B2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é –≤–∞–∫–∞–Ω—Å–∏—é...');
                const isUnavailable = detectUnavailableVacancy();
                console.log('üö´ –†–µ–∑—É–ª—å—Ç–∞—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏:', isUnavailable);
                
                if (isUnavailable) {
                    console.log('üö´ –û–ë–ù–ê–†–£–ñ–ï–ù–ê –ù–ï–î–û–°–¢–£–ü–ù–ê–Ø –í–ê–ö–ê–ù–°–ò–Ø - –Ω–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É...');
                    
                    try {
                        console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST /api/vacancy/unavailable...');
                        // –û—Ç–º–µ—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é
                        const unavailableResponse = await fetch(`${SERVER_URL}/api/vacancy/unavailable`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ vacancyId: vacancy.id })
                        });
                        const unavailableResult = await unavailableResponse.json();
                        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç unavailable –∑–∞–ø—Ä–æ—Å–∞:', unavailableResult);
                        
                        console.log('üö´ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è!');
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π:', error);
                    }
                    
                    console.log('üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏');
                    window.close();
                    return;
                } else {
                    console.log('‚úÖ –í–∞–∫–∞–Ω—Å–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É');
                }
                
                // –ï—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è - —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω—É–∂–Ω–æ –ª–∏ —Å–Ω—è—Ç—å –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —Å–∏—Å—Ç–µ–º—ã...');
                try {
                    const blockStatusResponse = await fetch(`${SERVER_URL}/api/is-blocked`);
                    const blockStatus = await blockStatusResponse.json();
                    
                    if (blockStatus.isBlocked) {
                        console.log('üéâ –°–∏—Å—Ç–µ–º–∞ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è - —Å–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É!');
                        const clearResponse = await fetch(`${SERVER_URL}/api/clear-blocked`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' }
                        });
                        const clearResult = await clearResponse.json();
                        console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–Ω—è—Ç–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', clearResult);
                    } else {
                        console.log('‚úÖ –°–∏—Å—Ç–µ–º–∞ –Ω–µ –±—ã–ª–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—ã—á–Ω—É—é —Ä–∞–±–æ—Ç—É');
                    }
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/—Å–Ω—è—Ç–∏–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', error);
                }
            }
            
            // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"
            console.log('üîç –≠—Ç–∞–ø C: –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ (–µ—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ù–ï 403)...');
            
            // –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            const blockStatusResponse = await fetch(`${SERVER_URL}/api/is-blocked`);
            const blockStatus = await blockStatusResponse.json();
            console.log('üìä –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:', blockStatus);
            
            if (blockStatus.isBlocked) {
                console.log('üö´ –°–∏—Å—Ç–µ–º–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –Ω–æ —ç—Ç–æ –ù–ï 403 —Å—Ç—Ä–∞–Ω–∏—Ü–∞');
                console.log('üö™ –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É - –¥–æ–∂–∏–¥–∞–µ–º—Å—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏');
                window.close();
                return;
            }
            
            console.log('‚úÖ –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–∏—Å–∫—É –∫–Ω–æ–ø–∫–∏ –æ—Ç–∫–ª–∏–∫–∞...');
            const responseButton = await waitForElement('a[data-qa="vacancy-response-link-top"]');
            
            if (!responseButton) {
                console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                await markVacancyAsFailed(vacancy.id, '–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
                window.close();
                return;
            }
            
            console.log('‚úì –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞–µ–º...');
            responseButton.click();
            
            // –ê–∫—Ç–∏–≤–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–∫–ª–∏–∫–∞ (3 –≤–æ–∑–º–æ–∂–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è)
            console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫–ª–∏–∫–∞...');
            
            // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–∫–ª–∏–∫–∞
            const checkSuccess = () => {
                return Array.from(document.querySelectorAll('*')).find(el => 
                    el.textContent && el.textContent.replace(/[\s\u00A0]+/g, ' ').trim() === '–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å'
                );
            };
            
            // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞ –Ω–∞ –∫–≤–∏–∑
            const checkQuizRedirect = () => {
                return window.location.pathname.includes('/applicant/vacancy_response');
            };
            
            // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–æ–¥–∞–ª–∫–∏ —Å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø–∏—Å—å–º–æ–º
            const checkCoverLetterModal = () => {
                return detectCoverLetterModal();
            };
            
            // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ 403 –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
            const check403Block = () => {
                const result = detect403Block();
                if (result) {
                    console.log('üö´ check403Block() –≤–µ—Ä–Ω—É–ª TRUE - 403 –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!');
                }
                return result;
            };
            
            // –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π –≤–∞–∫–∞–Ω—Å–∏–∏
            const checkUnavailableVacancy = () => {
                const result = detectUnavailableVacancy();
                if (result) {
                    console.log('üö´ checkUnavailableVacancy() –≤–µ—Ä–Ω—É–ª TRUE - –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞!');
                }
                return result;
            };
            
            // –ñ–¥–µ–º –æ–¥–Ω–æ–≥–æ –∏–∑ –ø—è—Ç–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π (–º–∞–∫—Å–∏–º—É–º 60 —Å–µ–∫—É–Ω–¥)
            let result = null;
            const maxAttempts = 600; // 60 —Å–µ–∫—É–Ω–¥ –ø—Ä–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–µ 100–º—Å
            
            for (let attempt = 0; attempt < maxAttempts; attempt++) {
                if (attempt % 50 === 0) { // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
                    console.log(`üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è (${attempt}/600)...`);
                }
                
                if (checkSuccess()) {
                    console.log('‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–∫–ª–∏–∫');
                    result = 'success';
                    break;
                } else if (checkQuizRedirect()) {
                    console.log('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∫–≤–∏–∑');
                    result = 'quiz';
                    break;
                } else if (checkCoverLetterModal()) {
                    console.log('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–æ–¥–∞–ª–∫–∞ —Å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø–∏—Å—å–º–æ–º');
                    result = 'cover_letter';
                    break;
                } else if (check403Block()) {
                    console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ 403 –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞');
                    result = 'blocked_403';
                    break;
                } else if (checkUnavailableVacancy()) {
                    console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è');
                    result = 'unavailable';
                    break;
                }
                await sleep(100);
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if (result === 'success') {
                console.log('üéâ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
                
                
                // –°–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –ø–æ–º–µ—Ç–∏—Ç—å completed + –æ—Ç–∫—Ä—ã—Ç—å —Å–ª–µ–¥—É—é—â—É—é
                await fetch(`${SERVER_URL}/api/vacancy/completed-and-next`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ vacancyId: vacancy.id })
                });
            } else if (result === 'quiz') {
                console.log('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ–¥–∏—Ä–µ–∫—Ç –Ω–∞ –∫–≤–∏–∑ - –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–≤–∏–∑–∞');
                // handleQuizPage() –±—É–¥–µ—Ç –≤—ã–∑–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                return;
            } else if (result === 'cover_letter') {
                console.log('üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –º–æ–¥–∞–ª–∫–∞ —Å —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–º –ø–∏—Å—å–º–æ–º');
                await fetch(`${SERVER_URL}/api/vacancy/requires-cover-letter`, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ vacancyId: vacancy.id })
                });
            } else if (result === 'blocked_403') {
                console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ 403 –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
                
                try {
                    // –û—Ç–º–µ—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é
                    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST /api/vacancy/blocked...');
                    const blockedResponse = await fetch(`${SERVER_URL}/api/vacancy/blocked`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ vacancyId: vacancy.id })
                    });
                    const blockedResult = await blockedResponse.json();
                    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç /api/vacancy/blocked:', blockedResult);
                    
                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
                    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST /api/set-blocked...');
                    const setBlockedResponse = await fetch(`${SERVER_URL}/api/set-blocked`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' }
                    });
                    const setBlockedResult = await setBlockedResponse.json();
                    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç /api/set-blocked:', setBlockedResult);
                    
                    console.log('üö´ –°–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞!');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ —Å–∏—Å—Ç–µ–º—ã:', error);
                }
            } else if (result === 'unavailable') {
                console.log('üö´ –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–µ—Ä–≤–µ—Ä');
                
                try {
                    // –û—Ç–º–µ—á–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—É—é
                    console.log('üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST /api/vacancy/unavailable...');
                    const unavailableResponse = await fetch(`${SERVER_URL}/api/vacancy/unavailable`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ vacancyId: vacancy.id })
                    });
                    const unavailableResult = await unavailableResponse.json();
                    console.log('‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç /api/vacancy/unavailable:', unavailableResult);
                    
                    console.log('üö´ –í–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞—è!');
                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–º–µ—Ç–∫–µ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ–π:', error);
                }
            } else {
                console.log('‚ùå –¢–∞–π–º–∞—É—Ç - –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–∫–ª–∏–∫–∞');
                await markVacancyAsFailed(vacancy.id, '–¢–∞–π–º–∞—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–∫–ª–∏–∫–∞');
            }
            
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            window.close();
            
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–æ–±—Ä–∞–±–æ—Ç–∫–∏:', error);
            window.close();
        }
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    async function getNextVacancy() {
        try {
            const response = await fetch(`${SERVER_URL}/api/next-vacancy`);
            const data = await response.json();
            return data.vacancy;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–π –≤–∞–∫–∞–Ω—Å–∏–∏:', error);
            return null;
        }
    }
    
    // –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ "–≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
    async function markVacancyAsProcessing(vacancyId) {
        try {
            await fetch(`${SERVER_URL}/api/vacancy/start`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ vacancyId })
            });
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∫ processing:', error);
        }
    }
    
    // –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ "–æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å"
    async function markVacancyAsCompleted(vacancyId) {
        try {
            await fetch(`${SERVER_URL}/api/vacancy/complete`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ vacancyId })
            });
            console.log('‚úÖ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ');
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∫ completed:', error);
        }
    }
    
    // –û—Ç–º–µ—Ç–∏—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é –∫–∞–∫ "–æ—à–∏–±–∫–∞"
    async function markVacancyAsFailed(vacancyId, reason) {
        try {
            await fetch(`${SERVER_URL}/api/vacancy/failed`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ vacancyId, reason })
            });
            console.log('‚ùå –í–∞–∫–∞–Ω—Å–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω–∞—è:', reason);
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ—Ç–∫–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ –∫–∞–∫ failed:', error);
        }
    }
    
    // –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ—è–≤–ª–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞
    async function waitForElement(selector, maxAttempts = 20) {
        for (let i = 0; i < maxAttempts; i++) {
            const element = document.querySelector(selector);
            if (element) {
                return element;
            }
            await sleep(500);
        }
        return null;
    }
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ –Ω–∞ –µ—ë —Å—Ç—Ä–∞–Ω–∏—Ü–µ (—Ç–æ–ª—å–∫–æ –∫–ª–∏–∫ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
    async function processVacancyOnPage(vacancy) {
        console.log(`üéØ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: ${vacancy.title}`);
        
        // –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏ –∏—â–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"
        const responseButton = await waitForElement('a[data-qa="vacancy-response-link-top"]');
        
        if (!responseButton) {
            console.log('‚ùå –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            await markVacancyAsFailed(vacancy.id, '–ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            return false;
        }
        
        console.log('‚úì –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –Ω–∞–π–¥–µ–Ω–∞, –∫–ª–∏–∫–∞–µ–º...');
        responseButton.click();
        
        // –ñ–¥—ë–º –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª–∏–∫–µ
        await sleep(2000); // –ñ–¥—ë–º –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
        const successElement = Array.from(document.querySelectorAll('*')).find(el => 
            el.textContent && el.textContent.replace(/[\s\u00A0]+/g, ' ').trim() === '–í—ã –æ—Ç–∫–ª–∏–∫–Ω—É–ª–∏—Å—å'
        );
        
        if (successElement) {
            console.log('üéâ –û—Ç–∫–ª–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            await markVacancyAsCompleted(vacancy.id);
            return true;
        } else {
            console.log('‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –æ—Ç–∫–ª–∏–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
            await markVacancyAsFailed(vacancy.id, '–û—Ç–∫–ª–∏–∫ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª—Å—è');
            return false;
        }
    }
    
    
    // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    window.menancingStart = startAutoParsing;
    window.menancingParse = parseCurrentPage;
    window.menancingStats = getStats;
    window.menancingScroll = scrollUntilAllCardsLoaded;
    window.menancingProcessVacancy = processVacancyFromDashboard; // –†—É—á–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏
    window.menancingStop = () => {
        isParsingActive = false;
        console.log('‚èπÔ∏è –ü–∞—Ä—Å–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    };
    
    // –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    window.menancingClickResponse = function() {
        console.log('üéØ –ò—â–µ–º –∫–Ω–æ–ø–∫—É "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è" –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ');
        const button = Array.from(document.querySelectorAll('span')).find(span => 
            span.textContent.trim() === '–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è' && 
            span.className.includes('magritte-button__label')
        );
        if (button) {
            const parentButton = button.closest('button') || button.closest('[role="button"]') || button.parentElement;
            if (parentButton) {
                console.log('‚úì –ö–ª–∏–∫–∞–µ–º –ø–æ –∫–Ω–æ–ø–∫–µ "–û—Ç–∫–ª–∏–∫–Ω—É—Ç—å—Å—è"');
                parentButton.click();
                return true;
            }
        }
        console.log('‚ùå –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        return false;
    };
    
    window.menancingFillTextarea = function(text = "–ó–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω –≤ –¥–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏") {
        const textarea = document.querySelector('textarea[data-qa="vacancy-response-popup-form-letter-input"]');
        if (textarea) {
            const nativeValueSetter = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, "value").set;
            nativeValueSetter.call(textarea, text);
            const event = new Event('input', { bubbles: true });
            textarea.dispatchEvent(event);
            return true;
        }
        return false;
    };

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    async function checkIfBlocked() {
        try {
            const response = await fetch(`${SERVER_URL}/api/is-blocked`);
            const data = await response.json();
            
            if (data.isBlocked) {
                console.log('üö´ –°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ - –∑–∞–∫—Ä—ã–≤–∞–µ–º –≤–∫–ª–∞–¥–∫—É');
                window.close();
                return true;
            }
            return false;
        } catch (error) {
            return false;
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    async function init() {
        const currentUrl = window.location.href;
        const pathname = window.location.pathname;
        
        console.log(`üöÄ Menancing Client –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –Ω–∞: ${pathname}`);
        console.log(`üîó –ü–æ–ª–Ω—ã–π URL: ${currentUrl}`);
        
        console.log('‚ö° –≠—Ç–∞–ø 1: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã...');
        
        // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü –≤–∞–∫–∞–Ω—Å–∏–π - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º 403
        if (pathname.includes('/vacancy/') || currentUrl.includes('/vacancy/')) {
            console.log('üéØ –¢–ò–ü –°–¢–†–ê–ù–ò–¶–´: –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –≤–∞–∫–∞–Ω—Å–∏—è (/vacancy/)');
            console.log('‚úì –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–µ–∂–∏–º: –ø—Ä–æ–≤–µ—Ä—è–µ–º 403 –ü–ï–†–ï–î –≥–ª–æ–±–∞–ª—å–Ω–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π');
            console.log('üìç URL:', currentUrl);
            console.log('üìç Pathname:', pathname);
            
            setTimeout(async () => {
                console.log('‚ö° –≠—Ç–∞–ø 2: –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–∏ (403 —Å–Ω–∞—á–∞–ª–∞)...');
                await processVacancyFromDashboard();
            }, 2000);
            return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã —Å—Ç—Ä–∞–Ω–∏—Ü
        }
        
        // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
        console.log('‚ö° –≠—Ç–∞–ø 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã...');
        const isBlocked = await checkIfBlocked();
        if (isBlocked) {
            console.log('üõë –í–´–•–û–î: –°–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é');
            return; // –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ —Å–∏—Å—Ç–µ–º–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞
        }
        
        console.log('‚ö° –≠—Ç–∞–ø 3: –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü...');
        
        if (pathname.includes('/applicant/vacancy_response') || currentUrl.includes('/applicant/vacancy_response')) {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–≤–∏–∑–∞ - —Ç—Ä–µ–±—É–µ—Ç —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            console.log('üìù –¢–ò–ü –°–¢–†–ê–ù–ò–¶–´: –ö–≤–∏–∑ (vacancy_response)');
            console.log('‚úì –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...');
            setTimeout(async () => {
                console.log('üéØ –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–≤–∏–∑–∞...');
                await handleQuizPage();
            }, 2000);
        } else if (pathname.includes('/search/vacancy') || currentUrl.includes('/search/vacancy')) {
            // –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–∫–∞–Ω—Å–∏–π
            console.log('üîç –¢–ò–ü –°–¢–†–ê–ù–ò–¶–´: –ü–æ–∏—Å–∫ –≤–∞–∫–∞–Ω—Å–∏–π (search/vacancy)');
            console.log('‚úì –ü–∞—Ä—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø–æ–∏—Å–∫–∞');
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
            console.log('- menancingStart() - –∑–∞–ø—É—Å–∫ –∞–≤—Ç–æ–ø–∞—Ä—Å–∏–Ω–≥–∞');
            console.log('- menancingParse() - –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã');
            console.log('- menancingStats() - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏');
            console.log('- menancingScroll() - —Ç–µ—Å—Ç –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ lazy loading');
            console.log('- menancingStop() - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
            
            // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á—ë–Ω
            if (config.autoStart) {
                setTimeout(() => {
                    console.log('ü§ñ –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–∞—Ä—Å–∏–Ω–≥–∞ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...');
                    setTimeout(startAutoParsing, 3000);
                }, 1000);
            }
        } else {
            console.log('‚ùì –¢–ò–ü –°–¢–†–ê–ù–ò–¶–´: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø');
            console.log('‚úì –°–∫—Ä–∏–ø—Ç –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–º –¥–æ–º–µ–Ω–µ hh.ru');
            console.log('üìç –ü—É—Ç—å:', pathname);
            console.log('üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:');
            console.log('- menancingStop() - –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
        }
    }

    // –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();